{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"_5 텐서플로우 Data API.ipynb의 사본","provenance":[{"file_id":"1e6fesK9IzvQC6quTINflFonvBwzzlebl","timestamp":1602782072832}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"48636ab5fe0147f7943498837ffaad7f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_8d097b5ae4a74ed89a53f465d510dd9d","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_72c5285546054deeaf86225235058927","IPY_MODEL_6a952238c8c14502857f18c43655baa9"]}},"8d097b5ae4a74ed89a53f465d510dd9d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"72c5285546054deeaf86225235058927":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_645b03e6ddf643cb99ea17fcd1b707a7","_dom_classes":[],"description":"Dl Completed...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_9eb03f5167d642c5b33d4ee083b38ff4"}},"6a952238c8c14502857f18c43655baa9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_5399ef2e798147abb9df93b8f7f431ed","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 1/1 [00:02&lt;00:00,  2.25s/ url]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_6e04f6a9d7494642920765515820ffd7"}},"645b03e6ddf643cb99ea17fcd1b707a7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"9eb03f5167d642c5b33d4ee083b38ff4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5399ef2e798147abb9df93b8f7f431ed":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"6e04f6a9d7494642920765515820ffd7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7e0cde64103742c9bfa23b195aa49d56":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_46924571f0fc40fda0cac9422da31835","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d8ca1746501d44a890215888f4c9d36c","IPY_MODEL_bbf7209e97a8466897099edd7c33c35b"]}},"46924571f0fc40fda0cac9422da31835":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d8ca1746501d44a890215888f4c9d36c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_6bdf6670d684462eb28ae590f157c2c5","_dom_classes":[],"description":"Dl Size...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2211f7abb1644a0d9db94c29b4977add"}},"bbf7209e97a8466897099edd7c33c35b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_dbb949fb9bf24ded8837839d7bd7ef5b","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 80/80 [00:02&lt;00:00, 36.09 MiB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_e03f58f0f37b4c0f9e44ba5a097e601d"}},"6bdf6670d684462eb28ae590f157c2c5":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"2211f7abb1644a0d9db94c29b4977add":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"dbb949fb9bf24ded8837839d7bd7ef5b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"e03f58f0f37b4c0f9e44ba5a097e601d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a0ac8a39533343caa99053ecb90b1333":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_773e7c389281481298d6b0ce0d1e1eef","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_18b34f371bee4cd982fbc3a8551e133f","IPY_MODEL_d5f196ae00a34db69de63be5970adc78"]}},"773e7c389281481298d6b0ce0d1e1eef":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"18b34f371bee4cd982fbc3a8551e133f":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_c2e8bc030fa94cb18e4aecd6ccd36799","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4d7b1e4012984708bd120c178820bc89"}},"d5f196ae00a34db69de63be5970adc78":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1f415128124747c084ab985b4d9f6927","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 25000/0 [00:15&lt;00:00, 2944.26 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_7f2d691217ab49a298b705162cd35fa0"}},"c2e8bc030fa94cb18e4aecd6ccd36799":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"4d7b1e4012984708bd120c178820bc89":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1f415128124747c084ab985b4d9f6927":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"7f2d691217ab49a298b705162cd35fa0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e24debdc56fd487285406e970dbdc5ad":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_9f9697f3ecdc4da1baee1fc94cba86f9","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_167451b17e734f92a2b94c543d8fe4b4","IPY_MODEL_c03a834587e74be894e70f03e1d50fb4"]}},"9f9697f3ecdc4da1baee1fc94cba86f9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"167451b17e734f92a2b94c543d8fe4b4":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_7e274174691145879bcd8ad6fca6fe03","_dom_classes":[],"description":" 25%","_model_name":"FloatProgressModel","bar_style":"danger","max":25000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":6159,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_e7eebd6bf35c4169ba1698c4f6702a30"}},"c03a834587e74be894e70f03e1d50fb4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_5554218b2646468595bc20d93d798403","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 6159/25000 [00:00&lt;00:00, 61588.88 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_561102f8bf684227b7dc5442147369ef"}},"7e274174691145879bcd8ad6fca6fe03":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"e7eebd6bf35c4169ba1698c4f6702a30":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5554218b2646468595bc20d93d798403":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"561102f8bf684227b7dc5442147369ef":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f778cd8a5d994f6f9252c264158c09d6":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_59e8b9ccbd5d459696acc0a0c32e516a","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d4405e0362b64648924473b4bbba1095","IPY_MODEL_36e85d03032d434098a773aa6f83dd8f"]}},"59e8b9ccbd5d459696acc0a0c32e516a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d4405e0362b64648924473b4bbba1095":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_36f56a63973c420b8d1d74cb0f15b5a8","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_6c83ea1963da4d5ebdcc9d5ac86afc50"}},"36e85d03032d434098a773aa6f83dd8f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_568f8a4d75874135928b39d114b27e1c","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 25000/0 [00:14&lt;00:00, 2882.90 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3e4cfab5388846f39e8123d7679155c9"}},"36f56a63973c420b8d1d74cb0f15b5a8":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"6c83ea1963da4d5ebdcc9d5ac86afc50":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"568f8a4d75874135928b39d114b27e1c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"3e4cfab5388846f39e8123d7679155c9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"eb9378bef61e47b4ab03769ba8eec1ca":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_54d0388b81894a9a81f8c30878c745e5","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_7389c28a51b940a5b5f822330e508eaf","IPY_MODEL_247ef31c890b4139ab0cd91536a7b226"]}},"54d0388b81894a9a81f8c30878c745e5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7389c28a51b940a5b5f822330e508eaf":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_a732526f705041bdb629ddbb7ea9c224","_dom_classes":[],"description":" 19%","_model_name":"FloatProgressModel","bar_style":"danger","max":25000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":4642,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_fb84b489ec014a9885c025efc0111271"}},"247ef31c890b4139ab0cd91536a7b226":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_eaa198ecb1334828ab59c05a9496f1b3","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 4642/25000 [00:00&lt;00:00, 46417.17 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_fdda40497bbc4c1589416a865baf80fb"}},"a732526f705041bdb629ddbb7ea9c224":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"fb84b489ec014a9885c025efc0111271":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"eaa198ecb1334828ab59c05a9496f1b3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"fdda40497bbc4c1589416a865baf80fb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7abf247b88514875a1577003e8ccd3d5":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c92b8a1e90d14e3094c59080f1db7633","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_25f3d5659a5d49988dcafc9b2a4b29f4","IPY_MODEL_15f5234db4a5425086642d03cc90203b"]}},"c92b8a1e90d14e3094c59080f1db7633":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"25f3d5659a5d49988dcafc9b2a4b29f4":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_87ddde5ef7254833aa7fe344b9a179f9","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3932bb109a4a4fc498e2243665b99869"}},"15f5234db4a5425086642d03cc90203b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_9ace18916e5d420cbaa09d25463f4734","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 50000/0 [00:21&lt;00:00, 2930.47 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_b4114b2e64cf414cb176fa7470c6e3b0"}},"87ddde5ef7254833aa7fe344b9a179f9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"3932bb109a4a4fc498e2243665b99869":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9ace18916e5d420cbaa09d25463f4734":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"b4114b2e64cf414cb176fa7470c6e3b0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f9683ddd8be64e64892aac0ff60301eb":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_38409d3437aa46f1972ed759fee680c5","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_270e68572d4d43a6a4eaf790dbe0ceba","IPY_MODEL_71334ce5fc954ce293d46425ab595bd9"]}},"38409d3437aa46f1972ed759fee680c5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"270e68572d4d43a6a4eaf790dbe0ceba":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_9076c0458b4f46c9b8cdc3c308028e4d","_dom_classes":[],"description":" 89%","_model_name":"FloatProgressModel","bar_style":"danger","max":50000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":44492,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_065a3059a4d846599e5f2902f26f8b68"}},"71334ce5fc954ce293d46425ab595bd9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_f0a5ba20469c46c8bfac022ced5b7514","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 44492/50000 [00:00&lt;04:36, 19.92 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_9390e602e1b6456e9e4b43b3f792bb04"}},"9076c0458b4f46c9b8cdc3c308028e4d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"065a3059a4d846599e5f2902f26f8b68":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f0a5ba20469c46c8bfac022ced5b7514":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"9390e602e1b6456e9e4b43b3f792bb04":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"pvT4Kena44U-"},"source":["# Data API\n","\n","- `tf.data`: https://www.tensorflow.org/api_docs/python/tf/data\n","- `tf.data.datasets`\n","\n"]},{"cell_type":"markdown","metadata":{"id":"qMJ7xx8N882t"},"source":["## tf.data.datasets"]},{"cell_type":"code","metadata":{"id":"uA_5y-rv5K0x","executionInfo":{"status":"ok","timestamp":1602776013856,"user_tz":-540,"elapsed":2717,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["import tensorflow as tf\n","import tensorflow_datasets as tfds"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"_77BigY5g3hd","executionInfo":{"status":"ok","timestamp":1602776013857,"user_tz":-540,"elapsed":2701,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"5eefea31-0eb2-4649-94d9-5b1ac73dd44d","colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["builder = tfds.list_builders()\n","print(builder)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["['abstract_reasoning', 'aeslc', 'aflw2k3d', 'amazon_us_reviews', 'arc', 'bair_robot_pushing_small', 'beans', 'big_patent', 'bigearthnet', 'billsum', 'binarized_mnist', 'binary_alpha_digits', 'c4', 'caltech101', 'caltech_birds2010', 'caltech_birds2011', 'cars196', 'cassava', 'cats_vs_dogs', 'celeb_a', 'celeb_a_hq', 'cfq', 'chexpert', 'cifar10', 'cifar100', 'cifar10_1', 'cifar10_corrupted', 'citrus_leaves', 'cityscapes', 'civil_comments', 'clevr', 'cmaterdb', 'cnn_dailymail', 'coco', 'coil100', 'colorectal_histology', 'colorectal_histology_large', 'cos_e', 'curated_breast_imaging_ddsm', 'cycle_gan', 'deep_weeds', 'definite_pronoun_resolution', 'diabetic_retinopathy_detection', 'div2k', 'dmlab', 'downsampled_imagenet', 'dsprites', 'dtd', 'duke_ultrasound', 'dummy_dataset_shared_generator', 'dummy_mnist', 'emnist', 'eraser_multi_rc', 'esnli', 'eurosat', 'fashion_mnist', 'flic', 'flores', 'food101', 'gap', 'gigaword', 'glue', 'groove', 'higgs', 'horses_or_humans', 'i_naturalist2017', 'image_label_folder', 'imagenet2012', 'imagenet2012_corrupted', 'imagenet_resized', 'imagenette', 'imagewang', 'imdb_reviews', 'iris', 'kitti', 'kmnist', 'lfw', 'librispeech', 'librispeech_lm', 'libritts', 'lm1b', 'lost_and_found', 'lsun', 'malaria', 'math_dataset', 'mnist', 'mnist_corrupted', 'movie_rationales', 'moving_mnist', 'multi_news', 'multi_nli', 'multi_nli_mismatch', 'natural_questions', 'newsroom', 'nsynth', 'omniglot', 'open_images_v4', 'opinosis', 'oxford_flowers102', 'oxford_iiit_pet', 'para_crawl', 'patch_camelyon', 'pet_finder', 'places365_small', 'plant_leaves', 'plant_village', 'plantae_k', 'qa4mre', 'quickdraw_bitmap', 'reddit_tifu', 'resisc45', 'rock_paper_scissors', 'rock_you', 'scan', 'scene_parse150', 'scicite', 'scientific_papers', 'shapes3d', 'smallnorb', 'snli', 'so2sat', 'speech_commands', 'squad', 'stanford_dogs', 'stanford_online_products', 'starcraft_video', 'sun397', 'super_glue', 'svhn_cropped', 'ted_hrlr_translate', 'ted_multi_translate', 'tf_flowers', 'the300w_lp', 'tiny_shakespeare', 'titanic', 'trivia_qa', 'uc_merced', 'ucf101', 'vgg_face2', 'visual_domain_decathlon', 'voc', 'wider_face', 'wikihow', 'wikipedia', 'wmt14_translate', 'wmt15_translate', 'wmt16_translate', 'wmt17_translate', 'wmt18_translate', 'wmt19_translate', 'wmt_t2t_translate', 'wmt_translate', 'xnli', 'xsum', 'yelp_polarity_reviews']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wmRzwmofg3ef","executionInfo":{"status":"ok","timestamp":1602776014380,"user_tz":-540,"elapsed":3192,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["data, info = tfds.load('mnist', with_info=True)\n","train_data, test_data = data['train'], data['test']"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"PgvmOxeYg3bi","executionInfo":{"status":"ok","timestamp":1602776014380,"user_tz":-540,"elapsed":3161,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"effc4beb-5a63-42a0-f6c5-170252938003","colab":{"base_uri":"https://localhost:8080/","height":442}},"source":["print(info)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["tfds.core.DatasetInfo(\n","    name='mnist',\n","    version=3.0.0,\n","    description='The MNIST database of handwritten digits.',\n","    homepage='http://yann.lecun.com/exdb/mnist/',\n","    features=FeaturesDict({\n","        'image': Image(shape=(28, 28, 1), dtype=tf.uint8),\n","        'label': ClassLabel(shape=(), dtype=tf.int64, num_classes=10),\n","    }),\n","    total_num_examples=70000,\n","    splits={\n","        'test': 10000,\n","        'train': 60000,\n","    },\n","    supervised_keys=('image', 'label'),\n","    citation=\"\"\"@article{lecun2010mnist,\n","      title={MNIST handwritten digit database},\n","      author={LeCun, Yann and Cortes, Corinna and Burges, CJ},\n","      journal={ATT Labs [Online]. Available: http://yann. lecun. com/exdb/mnist},\n","      volume={2},\n","      year={2010}\n","    }\"\"\",\n","    redistribution_info=,\n",")\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"adN6woERhQrO"},"source":["## tf.data\n","\n","- 생성\n","  - `from_tensor_slices()`: 개별 또는 다중 넘파이를 받고, 배치를 지원\n","\n","  - `from_tensors()`: 배치를 지원하지 않음\n","\n","  - `from_generator()`: 생성자 함수에서 입력을 취함\n","\n","- 변환\n","\n","  - `batch()`: 순차적으로 지정한 배치사이즈로 데이터셋을 분할\n","\n","  - `repeat()`: 데이터를 복제\n","\n","  - `shuffle()`: 데이터를 무작위로 섞음\n","\n","  - `map()`: 데이터에 함수를 적용\n","\n","  - `filter()`: 데이터를 거르고자 할 때 사용\n","- 반복\n","  - `next_batch = iterator.get_next()` 사용"]},{"cell_type":"markdown","metadata":{"id":"51d2wkdMhTBn"},"source":["### from_tensor_slices"]},{"cell_type":"code","metadata":{"id":"HWzGguIUg3Yi","executionInfo":{"status":"ok","timestamp":1602776014381,"user_tz":-540,"elapsed":3143,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["import numpy as np"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"aaO5aOqsg3Vf","executionInfo":{"status":"ok","timestamp":1602776014381,"user_tz":-540,"elapsed":3132,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["num_itmes = 20\n","num_list = np.arange(num_itmes)\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"rFKz4nK2g3Sd","executionInfo":{"status":"ok","timestamp":1602776014381,"user_tz":-540,"elapsed":3127,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["num_list_dataset = tf.data.Dataset.from_tensor_slices(num_list)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"gzqeoFS6g3Pg","executionInfo":{"status":"ok","timestamp":1602776014382,"user_tz":-540,"elapsed":3112,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"5709be9e-13a6-41d9-965f-da805f3c447d","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["num_list_dataset"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<TensorSliceDataset shapes: (), types: tf.int64>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"oBK4nAS7lpBJ","executionInfo":{"status":"ok","timestamp":1602776014382,"user_tz":-540,"elapsed":3080,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"85daf592-12af-4ca6-8b28-d55ebccea1a4","colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["for item in num_list_dataset:\n","  print(item)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["tf.Tensor(0, shape=(), dtype=int64)\n","tf.Tensor(1, shape=(), dtype=int64)\n","tf.Tensor(2, shape=(), dtype=int64)\n","tf.Tensor(3, shape=(), dtype=int64)\n","tf.Tensor(4, shape=(), dtype=int64)\n","tf.Tensor(5, shape=(), dtype=int64)\n","tf.Tensor(6, shape=(), dtype=int64)\n","tf.Tensor(7, shape=(), dtype=int64)\n","tf.Tensor(8, shape=(), dtype=int64)\n","tf.Tensor(9, shape=(), dtype=int64)\n","tf.Tensor(10, shape=(), dtype=int64)\n","tf.Tensor(11, shape=(), dtype=int64)\n","tf.Tensor(12, shape=(), dtype=int64)\n","tf.Tensor(13, shape=(), dtype=int64)\n","tf.Tensor(14, shape=(), dtype=int64)\n","tf.Tensor(15, shape=(), dtype=int64)\n","tf.Tensor(16, shape=(), dtype=int64)\n","tf.Tensor(17, shape=(), dtype=int64)\n","tf.Tensor(18, shape=(), dtype=int64)\n","tf.Tensor(19, shape=(), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8oSVGyqAsJz3"},"source":["### from_generator()\n","- 해당 클래스 메서드를 사용하면 생성자에서 데이터셋 생성 가능\n","- output_types, output_shapes 인수로 출력 자료형과 크기를 지정해주어야 함"]},{"cell_type":"code","metadata":{"id":"5LEG6TzOsOAB","executionInfo":{"status":"ok","timestamp":1602776014383,"user_tz":-540,"elapsed":3048,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"c48a4371-0cdb-4692-f164-8735f05b186a","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import itertools\n","def gen():\n","  for i in itertools.count(1):\n","    yield (i, [1] * i)\n","\n","dataset = tf.data.Dataset.from_generator(\n","    gen,\n","    (tf.int64, tf.int64),\n","    (tf.TensorShape([]), tf.TensorShape([None]))\n",")\n","\n","list(dataset.take(3).as_numpy_iterator())"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, array([1])), (2, array([1, 1])), (3, array([1, 1, 1]))]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"P8X1Mn56sODk","executionInfo":{"status":"error","timestamp":1602776018972,"user_tz":-540,"elapsed":7606,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"52cba400-bbea-4af4-f6a0-c99385518b9e","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["for item in dataset:\n","  print(item)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["\u001b[1;30;43m스트리밍 출력 내용이 길어서 마지막 5000줄이 삭제되었습니다.\u001b[0m\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=923>, <tf.Tensor: shape=(923,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=924>, <tf.Tensor: shape=(924,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=925>, <tf.Tensor: shape=(925,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=926>, <tf.Tensor: shape=(926,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=927>, <tf.Tensor: shape=(927,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=928>, <tf.Tensor: shape=(928,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=929>, <tf.Tensor: shape=(929,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=930>, <tf.Tensor: shape=(930,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=931>, <tf.Tensor: shape=(931,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=932>, <tf.Tensor: shape=(932,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=933>, <tf.Tensor: shape=(933,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=934>, <tf.Tensor: shape=(934,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=935>, <tf.Tensor: shape=(935,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=936>, <tf.Tensor: shape=(936,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=937>, <tf.Tensor: shape=(937,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=938>, <tf.Tensor: shape=(938,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=939>, <tf.Tensor: shape=(939,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=940>, <tf.Tensor: shape=(940,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=941>, <tf.Tensor: shape=(941,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=942>, <tf.Tensor: shape=(942,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=943>, <tf.Tensor: shape=(943,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=944>, <tf.Tensor: shape=(944,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=945>, <tf.Tensor: shape=(945,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=946>, <tf.Tensor: shape=(946,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=947>, <tf.Tensor: shape=(947,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=948>, <tf.Tensor: shape=(948,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=949>, <tf.Tensor: shape=(949,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=950>, <tf.Tensor: shape=(950,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=951>, <tf.Tensor: shape=(951,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=952>, <tf.Tensor: shape=(952,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=953>, <tf.Tensor: shape=(953,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=954>, <tf.Tensor: shape=(954,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=955>, <tf.Tensor: shape=(955,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=956>, <tf.Tensor: shape=(956,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=957>, <tf.Tensor: shape=(957,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=958>, <tf.Tensor: shape=(958,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=959>, <tf.Tensor: shape=(959,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=960>, <tf.Tensor: shape=(960,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=961>, <tf.Tensor: shape=(961,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=962>, <tf.Tensor: shape=(962,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=963>, <tf.Tensor: shape=(963,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=964>, <tf.Tensor: shape=(964,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=965>, <tf.Tensor: shape=(965,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=966>, <tf.Tensor: shape=(966,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=967>, <tf.Tensor: shape=(967,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=968>, <tf.Tensor: shape=(968,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=969>, <tf.Tensor: shape=(969,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=970>, <tf.Tensor: shape=(970,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=971>, <tf.Tensor: shape=(971,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=972>, <tf.Tensor: shape=(972,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=973>, <tf.Tensor: shape=(973,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=974>, <tf.Tensor: shape=(974,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=975>, <tf.Tensor: shape=(975,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=976>, <tf.Tensor: shape=(976,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=977>, <tf.Tensor: shape=(977,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=978>, <tf.Tensor: shape=(978,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=979>, <tf.Tensor: shape=(979,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=980>, <tf.Tensor: shape=(980,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=981>, <tf.Tensor: shape=(981,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=982>, <tf.Tensor: shape=(982,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=983>, <tf.Tensor: shape=(983,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=984>, <tf.Tensor: shape=(984,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=985>, <tf.Tensor: shape=(985,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=986>, <tf.Tensor: shape=(986,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=987>, <tf.Tensor: shape=(987,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=988>, <tf.Tensor: shape=(988,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=989>, <tf.Tensor: shape=(989,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=990>, <tf.Tensor: shape=(990,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=991>, <tf.Tensor: shape=(991,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=992>, <tf.Tensor: shape=(992,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=993>, <tf.Tensor: shape=(993,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=994>, <tf.Tensor: shape=(994,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=995>, <tf.Tensor: shape=(995,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=996>, <tf.Tensor: shape=(996,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=997>, <tf.Tensor: shape=(997,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=998>, <tf.Tensor: shape=(998,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=999>, <tf.Tensor: shape=(999,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1000>, <tf.Tensor: shape=(1000,), dtype=int64, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1001>, <tf.Tensor: shape=(1001,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1002>, <tf.Tensor: shape=(1002,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1003>, <tf.Tensor: shape=(1003,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1004>, <tf.Tensor: shape=(1004,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1005>, <tf.Tensor: shape=(1005,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1006>, <tf.Tensor: shape=(1006,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1007>, <tf.Tensor: shape=(1007,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1008>, <tf.Tensor: shape=(1008,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1009>, <tf.Tensor: shape=(1009,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1010>, <tf.Tensor: shape=(1010,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1011>, <tf.Tensor: shape=(1011,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1012>, <tf.Tensor: shape=(1012,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1013>, <tf.Tensor: shape=(1013,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1014>, <tf.Tensor: shape=(1014,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1015>, <tf.Tensor: shape=(1015,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1016>, <tf.Tensor: shape=(1016,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1017>, <tf.Tensor: shape=(1017,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1018>, <tf.Tensor: shape=(1018,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1019>, <tf.Tensor: shape=(1019,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1020>, <tf.Tensor: shape=(1020,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1021>, <tf.Tensor: shape=(1021,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1022>, <tf.Tensor: shape=(1022,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1023>, <tf.Tensor: shape=(1023,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1024>, <tf.Tensor: shape=(1024,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1025>, <tf.Tensor: shape=(1025,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1026>, <tf.Tensor: shape=(1026,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1027>, <tf.Tensor: shape=(1027,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1028>, <tf.Tensor: shape=(1028,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1029>, <tf.Tensor: shape=(1029,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1030>, <tf.Tensor: shape=(1030,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1031>, <tf.Tensor: shape=(1031,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1032>, <tf.Tensor: shape=(1032,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1033>, <tf.Tensor: shape=(1033,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1034>, <tf.Tensor: shape=(1034,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1035>, <tf.Tensor: shape=(1035,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1036>, <tf.Tensor: shape=(1036,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1037>, <tf.Tensor: shape=(1037,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1038>, <tf.Tensor: shape=(1038,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1039>, <tf.Tensor: shape=(1039,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1040>, <tf.Tensor: shape=(1040,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1041>, <tf.Tensor: shape=(1041,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1042>, <tf.Tensor: shape=(1042,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1043>, <tf.Tensor: shape=(1043,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1044>, <tf.Tensor: shape=(1044,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1045>, <tf.Tensor: shape=(1045,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1046>, <tf.Tensor: shape=(1046,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1047>, <tf.Tensor: shape=(1047,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1048>, <tf.Tensor: shape=(1048,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1049>, <tf.Tensor: shape=(1049,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1050>, <tf.Tensor: shape=(1050,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1051>, <tf.Tensor: shape=(1051,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1052>, <tf.Tensor: shape=(1052,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1053>, <tf.Tensor: shape=(1053,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1054>, <tf.Tensor: shape=(1054,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1055>, <tf.Tensor: shape=(1055,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1056>, <tf.Tensor: shape=(1056,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1057>, <tf.Tensor: shape=(1057,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1058>, <tf.Tensor: shape=(1058,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1059>, <tf.Tensor: shape=(1059,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1060>, <tf.Tensor: shape=(1060,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1061>, <tf.Tensor: shape=(1061,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1062>, <tf.Tensor: shape=(1062,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1063>, <tf.Tensor: shape=(1063,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1064>, <tf.Tensor: shape=(1064,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1065>, <tf.Tensor: shape=(1065,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1066>, <tf.Tensor: shape=(1066,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1067>, <tf.Tensor: shape=(1067,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1068>, <tf.Tensor: shape=(1068,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1069>, <tf.Tensor: shape=(1069,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1070>, <tf.Tensor: shape=(1070,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1071>, <tf.Tensor: shape=(1071,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1072>, <tf.Tensor: shape=(1072,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1073>, <tf.Tensor: shape=(1073,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1074>, <tf.Tensor: shape=(1074,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1075>, <tf.Tensor: shape=(1075,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1076>, <tf.Tensor: shape=(1076,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1077>, <tf.Tensor: shape=(1077,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1078>, <tf.Tensor: shape=(1078,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1079>, <tf.Tensor: shape=(1079,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1080>, <tf.Tensor: shape=(1080,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1081>, <tf.Tensor: shape=(1081,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1082>, <tf.Tensor: shape=(1082,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1083>, <tf.Tensor: shape=(1083,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1084>, <tf.Tensor: shape=(1084,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1085>, <tf.Tensor: shape=(1085,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1086>, <tf.Tensor: shape=(1086,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1087>, <tf.Tensor: shape=(1087,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1088>, <tf.Tensor: shape=(1088,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1089>, <tf.Tensor: shape=(1089,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1090>, <tf.Tensor: shape=(1090,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1091>, <tf.Tensor: shape=(1091,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1092>, <tf.Tensor: shape=(1092,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1093>, <tf.Tensor: shape=(1093,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1094>, <tf.Tensor: shape=(1094,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1095>, <tf.Tensor: shape=(1095,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1096>, <tf.Tensor: shape=(1096,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1097>, <tf.Tensor: shape=(1097,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1098>, <tf.Tensor: shape=(1098,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1099>, <tf.Tensor: shape=(1099,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1100>, <tf.Tensor: shape=(1100,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1101>, <tf.Tensor: shape=(1101,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1102>, <tf.Tensor: shape=(1102,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1103>, <tf.Tensor: shape=(1103,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1104>, <tf.Tensor: shape=(1104,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1105>, <tf.Tensor: shape=(1105,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1106>, <tf.Tensor: shape=(1106,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1107>, <tf.Tensor: shape=(1107,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1108>, <tf.Tensor: shape=(1108,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1109>, <tf.Tensor: shape=(1109,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1110>, <tf.Tensor: shape=(1110,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1111>, <tf.Tensor: shape=(1111,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1112>, <tf.Tensor: shape=(1112,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1113>, <tf.Tensor: shape=(1113,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1114>, <tf.Tensor: shape=(1114,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1115>, <tf.Tensor: shape=(1115,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1116>, <tf.Tensor: shape=(1116,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1117>, <tf.Tensor: shape=(1117,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1118>, <tf.Tensor: shape=(1118,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1119>, <tf.Tensor: shape=(1119,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1120>, <tf.Tensor: shape=(1120,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1121>, <tf.Tensor: shape=(1121,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1122>, <tf.Tensor: shape=(1122,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1123>, <tf.Tensor: shape=(1123,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1124>, <tf.Tensor: shape=(1124,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1125>, <tf.Tensor: shape=(1125,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1126>, <tf.Tensor: shape=(1126,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1127>, <tf.Tensor: shape=(1127,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1128>, <tf.Tensor: shape=(1128,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1129>, <tf.Tensor: shape=(1129,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1130>, <tf.Tensor: shape=(1130,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1131>, <tf.Tensor: shape=(1131,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1132>, <tf.Tensor: shape=(1132,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1133>, <tf.Tensor: shape=(1133,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1134>, <tf.Tensor: shape=(1134,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1135>, <tf.Tensor: shape=(1135,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1136>, <tf.Tensor: shape=(1136,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1137>, <tf.Tensor: shape=(1137,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1138>, <tf.Tensor: shape=(1138,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1139>, <tf.Tensor: shape=(1139,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1140>, <tf.Tensor: shape=(1140,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1141>, <tf.Tensor: shape=(1141,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1142>, <tf.Tensor: shape=(1142,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1143>, <tf.Tensor: shape=(1143,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1144>, <tf.Tensor: shape=(1144,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1145>, <tf.Tensor: shape=(1145,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1146>, <tf.Tensor: shape=(1146,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1147>, <tf.Tensor: shape=(1147,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1148>, <tf.Tensor: shape=(1148,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1149>, <tf.Tensor: shape=(1149,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1150>, <tf.Tensor: shape=(1150,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1151>, <tf.Tensor: shape=(1151,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1152>, <tf.Tensor: shape=(1152,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1153>, <tf.Tensor: shape=(1153,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1154>, <tf.Tensor: shape=(1154,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1155>, <tf.Tensor: shape=(1155,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1156>, <tf.Tensor: shape=(1156,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1157>, <tf.Tensor: shape=(1157,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1158>, <tf.Tensor: shape=(1158,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1159>, <tf.Tensor: shape=(1159,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1160>, <tf.Tensor: shape=(1160,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1161>, <tf.Tensor: shape=(1161,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1162>, <tf.Tensor: shape=(1162,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1163>, <tf.Tensor: shape=(1163,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1164>, <tf.Tensor: shape=(1164,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1165>, <tf.Tensor: shape=(1165,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1166>, <tf.Tensor: shape=(1166,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1167>, <tf.Tensor: shape=(1167,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1168>, <tf.Tensor: shape=(1168,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1169>, <tf.Tensor: shape=(1169,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1170>, <tf.Tensor: shape=(1170,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1171>, <tf.Tensor: shape=(1171,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1172>, <tf.Tensor: shape=(1172,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1173>, <tf.Tensor: shape=(1173,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1174>, <tf.Tensor: shape=(1174,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1175>, <tf.Tensor: shape=(1175,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1176>, <tf.Tensor: shape=(1176,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1177>, <tf.Tensor: shape=(1177,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1178>, <tf.Tensor: shape=(1178,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1179>, <tf.Tensor: shape=(1179,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1180>, <tf.Tensor: shape=(1180,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1181>, <tf.Tensor: shape=(1181,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1182>, <tf.Tensor: shape=(1182,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1183>, <tf.Tensor: shape=(1183,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1184>, <tf.Tensor: shape=(1184,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1185>, <tf.Tensor: shape=(1185,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1186>, <tf.Tensor: shape=(1186,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1187>, <tf.Tensor: shape=(1187,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1188>, <tf.Tensor: shape=(1188,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1189>, <tf.Tensor: shape=(1189,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1190>, <tf.Tensor: shape=(1190,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1191>, <tf.Tensor: shape=(1191,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1192>, <tf.Tensor: shape=(1192,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1193>, <tf.Tensor: shape=(1193,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1194>, <tf.Tensor: shape=(1194,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1195>, <tf.Tensor: shape=(1195,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1196>, <tf.Tensor: shape=(1196,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1197>, <tf.Tensor: shape=(1197,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1198>, <tf.Tensor: shape=(1198,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1199>, <tf.Tensor: shape=(1199,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1200>, <tf.Tensor: shape=(1200,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1201>, <tf.Tensor: shape=(1201,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1202>, <tf.Tensor: shape=(1202,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1203>, <tf.Tensor: shape=(1203,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1204>, <tf.Tensor: shape=(1204,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1205>, <tf.Tensor: shape=(1205,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1206>, <tf.Tensor: shape=(1206,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1207>, <tf.Tensor: shape=(1207,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1208>, <tf.Tensor: shape=(1208,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1209>, <tf.Tensor: shape=(1209,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1210>, <tf.Tensor: shape=(1210,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1211>, <tf.Tensor: shape=(1211,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1212>, <tf.Tensor: shape=(1212,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1213>, <tf.Tensor: shape=(1213,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1214>, <tf.Tensor: shape=(1214,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1215>, <tf.Tensor: shape=(1215,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1216>, <tf.Tensor: shape=(1216,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1217>, <tf.Tensor: shape=(1217,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1218>, <tf.Tensor: shape=(1218,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1219>, <tf.Tensor: shape=(1219,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1220>, <tf.Tensor: shape=(1220,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1221>, <tf.Tensor: shape=(1221,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1222>, <tf.Tensor: shape=(1222,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1223>, <tf.Tensor: shape=(1223,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1224>, <tf.Tensor: shape=(1224,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1225>, <tf.Tensor: shape=(1225,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1226>, <tf.Tensor: shape=(1226,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1227>, <tf.Tensor: shape=(1227,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1228>, <tf.Tensor: shape=(1228,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1229>, <tf.Tensor: shape=(1229,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1230>, <tf.Tensor: shape=(1230,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1231>, <tf.Tensor: shape=(1231,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1232>, <tf.Tensor: shape=(1232,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1233>, <tf.Tensor: shape=(1233,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1234>, <tf.Tensor: shape=(1234,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1235>, <tf.Tensor: shape=(1235,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1236>, <tf.Tensor: shape=(1236,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1237>, <tf.Tensor: shape=(1237,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1238>, <tf.Tensor: shape=(1238,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1239>, <tf.Tensor: shape=(1239,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1240>, <tf.Tensor: shape=(1240,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1241>, <tf.Tensor: shape=(1241,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1242>, <tf.Tensor: shape=(1242,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1243>, <tf.Tensor: shape=(1243,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1244>, <tf.Tensor: shape=(1244,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1245>, <tf.Tensor: shape=(1245,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1246>, <tf.Tensor: shape=(1246,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1247>, <tf.Tensor: shape=(1247,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1248>, <tf.Tensor: shape=(1248,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1249>, <tf.Tensor: shape=(1249,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1250>, <tf.Tensor: shape=(1250,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1251>, <tf.Tensor: shape=(1251,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1252>, <tf.Tensor: shape=(1252,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1253>, <tf.Tensor: shape=(1253,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1254>, <tf.Tensor: shape=(1254,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1255>, <tf.Tensor: shape=(1255,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1256>, <tf.Tensor: shape=(1256,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1257>, <tf.Tensor: shape=(1257,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1258>, <tf.Tensor: shape=(1258,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1259>, <tf.Tensor: shape=(1259,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1260>, <tf.Tensor: shape=(1260,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1261>, <tf.Tensor: shape=(1261,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1262>, <tf.Tensor: shape=(1262,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1263>, <tf.Tensor: shape=(1263,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1264>, <tf.Tensor: shape=(1264,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1265>, <tf.Tensor: shape=(1265,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1266>, <tf.Tensor: shape=(1266,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1267>, <tf.Tensor: shape=(1267,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1268>, <tf.Tensor: shape=(1268,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1269>, <tf.Tensor: shape=(1269,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1270>, <tf.Tensor: shape=(1270,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1271>, <tf.Tensor: shape=(1271,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1272>, <tf.Tensor: shape=(1272,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1273>, <tf.Tensor: shape=(1273,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1274>, <tf.Tensor: shape=(1274,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1275>, <tf.Tensor: shape=(1275,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1276>, <tf.Tensor: shape=(1276,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1277>, <tf.Tensor: shape=(1277,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1278>, <tf.Tensor: shape=(1278,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1279>, <tf.Tensor: shape=(1279,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1280>, <tf.Tensor: shape=(1280,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1281>, <tf.Tensor: shape=(1281,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1282>, <tf.Tensor: shape=(1282,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1283>, <tf.Tensor: shape=(1283,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1284>, <tf.Tensor: shape=(1284,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1285>, <tf.Tensor: shape=(1285,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1286>, <tf.Tensor: shape=(1286,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1287>, <tf.Tensor: shape=(1287,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1288>, <tf.Tensor: shape=(1288,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1289>, <tf.Tensor: shape=(1289,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1290>, <tf.Tensor: shape=(1290,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1291>, <tf.Tensor: shape=(1291,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1292>, <tf.Tensor: shape=(1292,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1293>, <tf.Tensor: shape=(1293,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1294>, <tf.Tensor: shape=(1294,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1295>, <tf.Tensor: shape=(1295,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1296>, <tf.Tensor: shape=(1296,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1297>, <tf.Tensor: shape=(1297,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1298>, <tf.Tensor: shape=(1298,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1299>, <tf.Tensor: shape=(1299,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1300>, <tf.Tensor: shape=(1300,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1301>, <tf.Tensor: shape=(1301,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1302>, <tf.Tensor: shape=(1302,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1303>, <tf.Tensor: shape=(1303,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1304>, <tf.Tensor: shape=(1304,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1305>, <tf.Tensor: shape=(1305,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1306>, <tf.Tensor: shape=(1306,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1307>, <tf.Tensor: shape=(1307,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1308>, <tf.Tensor: shape=(1308,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1309>, <tf.Tensor: shape=(1309,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1310>, <tf.Tensor: shape=(1310,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1311>, <tf.Tensor: shape=(1311,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1312>, <tf.Tensor: shape=(1312,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1313>, <tf.Tensor: shape=(1313,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1314>, <tf.Tensor: shape=(1314,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1315>, <tf.Tensor: shape=(1315,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1316>, <tf.Tensor: shape=(1316,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1317>, <tf.Tensor: shape=(1317,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1318>, <tf.Tensor: shape=(1318,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1319>, <tf.Tensor: shape=(1319,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1320>, <tf.Tensor: shape=(1320,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1321>, <tf.Tensor: shape=(1321,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1322>, <tf.Tensor: shape=(1322,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1323>, <tf.Tensor: shape=(1323,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1324>, <tf.Tensor: shape=(1324,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1325>, <tf.Tensor: shape=(1325,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1326>, <tf.Tensor: shape=(1326,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1327>, <tf.Tensor: shape=(1327,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1328>, <tf.Tensor: shape=(1328,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1329>, <tf.Tensor: shape=(1329,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1330>, <tf.Tensor: shape=(1330,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1331>, <tf.Tensor: shape=(1331,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1332>, <tf.Tensor: shape=(1332,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1333>, <tf.Tensor: shape=(1333,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1334>, <tf.Tensor: shape=(1334,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1335>, <tf.Tensor: shape=(1335,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1336>, <tf.Tensor: shape=(1336,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1337>, <tf.Tensor: shape=(1337,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1338>, <tf.Tensor: shape=(1338,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1339>, <tf.Tensor: shape=(1339,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1340>, <tf.Tensor: shape=(1340,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1341>, <tf.Tensor: shape=(1341,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1342>, <tf.Tensor: shape=(1342,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1343>, <tf.Tensor: shape=(1343,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1344>, <tf.Tensor: shape=(1344,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1345>, <tf.Tensor: shape=(1345,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1346>, <tf.Tensor: shape=(1346,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1347>, <tf.Tensor: shape=(1347,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1348>, <tf.Tensor: shape=(1348,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1349>, <tf.Tensor: shape=(1349,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1350>, <tf.Tensor: shape=(1350,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1351>, <tf.Tensor: shape=(1351,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1352>, <tf.Tensor: shape=(1352,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1353>, <tf.Tensor: shape=(1353,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1354>, <tf.Tensor: shape=(1354,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1355>, <tf.Tensor: shape=(1355,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1356>, <tf.Tensor: shape=(1356,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1357>, <tf.Tensor: shape=(1357,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1358>, <tf.Tensor: shape=(1358,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1359>, <tf.Tensor: shape=(1359,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1360>, <tf.Tensor: shape=(1360,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1361>, <tf.Tensor: shape=(1361,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1362>, <tf.Tensor: shape=(1362,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1363>, <tf.Tensor: shape=(1363,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1364>, <tf.Tensor: shape=(1364,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1365>, <tf.Tensor: shape=(1365,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1366>, <tf.Tensor: shape=(1366,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1367>, <tf.Tensor: shape=(1367,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1368>, <tf.Tensor: shape=(1368,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1369>, <tf.Tensor: shape=(1369,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1370>, <tf.Tensor: shape=(1370,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1371>, <tf.Tensor: shape=(1371,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1372>, <tf.Tensor: shape=(1372,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1373>, <tf.Tensor: shape=(1373,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1374>, <tf.Tensor: shape=(1374,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1375>, <tf.Tensor: shape=(1375,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1376>, <tf.Tensor: shape=(1376,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1377>, <tf.Tensor: shape=(1377,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1378>, <tf.Tensor: shape=(1378,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1379>, <tf.Tensor: shape=(1379,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1380>, <tf.Tensor: shape=(1380,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1381>, <tf.Tensor: shape=(1381,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1382>, <tf.Tensor: shape=(1382,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1383>, <tf.Tensor: shape=(1383,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1384>, <tf.Tensor: shape=(1384,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1385>, <tf.Tensor: shape=(1385,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1386>, <tf.Tensor: shape=(1386,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1387>, <tf.Tensor: shape=(1387,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1388>, <tf.Tensor: shape=(1388,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1389>, <tf.Tensor: shape=(1389,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1390>, <tf.Tensor: shape=(1390,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1391>, <tf.Tensor: shape=(1391,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1392>, <tf.Tensor: shape=(1392,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1393>, <tf.Tensor: shape=(1393,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1394>, <tf.Tensor: shape=(1394,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1395>, <tf.Tensor: shape=(1395,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1396>, <tf.Tensor: shape=(1396,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1397>, <tf.Tensor: shape=(1397,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1398>, <tf.Tensor: shape=(1398,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1399>, <tf.Tensor: shape=(1399,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1400>, <tf.Tensor: shape=(1400,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1401>, <tf.Tensor: shape=(1401,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1402>, <tf.Tensor: shape=(1402,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1403>, <tf.Tensor: shape=(1403,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1404>, <tf.Tensor: shape=(1404,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1405>, <tf.Tensor: shape=(1405,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1406>, <tf.Tensor: shape=(1406,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1407>, <tf.Tensor: shape=(1407,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1408>, <tf.Tensor: shape=(1408,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1409>, <tf.Tensor: shape=(1409,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1410>, <tf.Tensor: shape=(1410,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1411>, <tf.Tensor: shape=(1411,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1412>, <tf.Tensor: shape=(1412,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1413>, <tf.Tensor: shape=(1413,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1414>, <tf.Tensor: shape=(1414,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1415>, <tf.Tensor: shape=(1415,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1416>, <tf.Tensor: shape=(1416,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1417>, <tf.Tensor: shape=(1417,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1418>, <tf.Tensor: shape=(1418,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1419>, <tf.Tensor: shape=(1419,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1420>, <tf.Tensor: shape=(1420,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1421>, <tf.Tensor: shape=(1421,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1422>, <tf.Tensor: shape=(1422,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1423>, <tf.Tensor: shape=(1423,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1424>, <tf.Tensor: shape=(1424,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1425>, <tf.Tensor: shape=(1425,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1426>, <tf.Tensor: shape=(1426,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1427>, <tf.Tensor: shape=(1427,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1428>, <tf.Tensor: shape=(1428,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1429>, <tf.Tensor: shape=(1429,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1430>, <tf.Tensor: shape=(1430,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1431>, <tf.Tensor: shape=(1431,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1432>, <tf.Tensor: shape=(1432,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1433>, <tf.Tensor: shape=(1433,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1434>, <tf.Tensor: shape=(1434,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1435>, <tf.Tensor: shape=(1435,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1436>, <tf.Tensor: shape=(1436,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1437>, <tf.Tensor: shape=(1437,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1438>, <tf.Tensor: shape=(1438,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1439>, <tf.Tensor: shape=(1439,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1440>, <tf.Tensor: shape=(1440,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1441>, <tf.Tensor: shape=(1441,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1442>, <tf.Tensor: shape=(1442,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1443>, <tf.Tensor: shape=(1443,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1444>, <tf.Tensor: shape=(1444,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1445>, <tf.Tensor: shape=(1445,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1446>, <tf.Tensor: shape=(1446,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1447>, <tf.Tensor: shape=(1447,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1448>, <tf.Tensor: shape=(1448,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1449>, <tf.Tensor: shape=(1449,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1450>, <tf.Tensor: shape=(1450,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1451>, <tf.Tensor: shape=(1451,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1452>, <tf.Tensor: shape=(1452,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1453>, <tf.Tensor: shape=(1453,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1454>, <tf.Tensor: shape=(1454,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1455>, <tf.Tensor: shape=(1455,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1456>, <tf.Tensor: shape=(1456,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1457>, <tf.Tensor: shape=(1457,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1458>, <tf.Tensor: shape=(1458,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1459>, <tf.Tensor: shape=(1459,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1460>, <tf.Tensor: shape=(1460,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1461>, <tf.Tensor: shape=(1461,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1462>, <tf.Tensor: shape=(1462,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1463>, <tf.Tensor: shape=(1463,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1464>, <tf.Tensor: shape=(1464,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1465>, <tf.Tensor: shape=(1465,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1466>, <tf.Tensor: shape=(1466,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1467>, <tf.Tensor: shape=(1467,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1468>, <tf.Tensor: shape=(1468,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1469>, <tf.Tensor: shape=(1469,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1470>, <tf.Tensor: shape=(1470,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1471>, <tf.Tensor: shape=(1471,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1472>, <tf.Tensor: shape=(1472,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1473>, <tf.Tensor: shape=(1473,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1474>, <tf.Tensor: shape=(1474,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1475>, <tf.Tensor: shape=(1475,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1476>, <tf.Tensor: shape=(1476,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1477>, <tf.Tensor: shape=(1477,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1478>, <tf.Tensor: shape=(1478,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1479>, <tf.Tensor: shape=(1479,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1480>, <tf.Tensor: shape=(1480,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1481>, <tf.Tensor: shape=(1481,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1482>, <tf.Tensor: shape=(1482,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1483>, <tf.Tensor: shape=(1483,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1484>, <tf.Tensor: shape=(1484,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1485>, <tf.Tensor: shape=(1485,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1486>, <tf.Tensor: shape=(1486,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1487>, <tf.Tensor: shape=(1487,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1488>, <tf.Tensor: shape=(1488,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1489>, <tf.Tensor: shape=(1489,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1490>, <tf.Tensor: shape=(1490,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1491>, <tf.Tensor: shape=(1491,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1492>, <tf.Tensor: shape=(1492,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1493>, <tf.Tensor: shape=(1493,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1494>, <tf.Tensor: shape=(1494,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1495>, <tf.Tensor: shape=(1495,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1496>, <tf.Tensor: shape=(1496,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1497>, <tf.Tensor: shape=(1497,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1498>, <tf.Tensor: shape=(1498,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1499>, <tf.Tensor: shape=(1499,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1500>, <tf.Tensor: shape=(1500,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1501>, <tf.Tensor: shape=(1501,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1502>, <tf.Tensor: shape=(1502,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1503>, <tf.Tensor: shape=(1503,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1504>, <tf.Tensor: shape=(1504,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1505>, <tf.Tensor: shape=(1505,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1506>, <tf.Tensor: shape=(1506,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1507>, <tf.Tensor: shape=(1507,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1508>, <tf.Tensor: shape=(1508,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1509>, <tf.Tensor: shape=(1509,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1510>, <tf.Tensor: shape=(1510,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1511>, <tf.Tensor: shape=(1511,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1512>, <tf.Tensor: shape=(1512,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1513>, <tf.Tensor: shape=(1513,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1514>, <tf.Tensor: shape=(1514,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1515>, <tf.Tensor: shape=(1515,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1516>, <tf.Tensor: shape=(1516,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1517>, <tf.Tensor: shape=(1517,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1518>, <tf.Tensor: shape=(1518,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1519>, <tf.Tensor: shape=(1519,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1520>, <tf.Tensor: shape=(1520,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1521>, <tf.Tensor: shape=(1521,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1522>, <tf.Tensor: shape=(1522,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1523>, <tf.Tensor: shape=(1523,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1524>, <tf.Tensor: shape=(1524,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1525>, <tf.Tensor: shape=(1525,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1526>, <tf.Tensor: shape=(1526,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1527>, <tf.Tensor: shape=(1527,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1528>, <tf.Tensor: shape=(1528,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1529>, <tf.Tensor: shape=(1529,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1530>, <tf.Tensor: shape=(1530,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1531>, <tf.Tensor: shape=(1531,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1532>, <tf.Tensor: shape=(1532,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1533>, <tf.Tensor: shape=(1533,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1534>, <tf.Tensor: shape=(1534,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1535>, <tf.Tensor: shape=(1535,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1536>, <tf.Tensor: shape=(1536,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1537>, <tf.Tensor: shape=(1537,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1538>, <tf.Tensor: shape=(1538,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1539>, <tf.Tensor: shape=(1539,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1540>, <tf.Tensor: shape=(1540,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1541>, <tf.Tensor: shape=(1541,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1542>, <tf.Tensor: shape=(1542,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1543>, <tf.Tensor: shape=(1543,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1544>, <tf.Tensor: shape=(1544,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1545>, <tf.Tensor: shape=(1545,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1546>, <tf.Tensor: shape=(1546,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1547>, <tf.Tensor: shape=(1547,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1548>, <tf.Tensor: shape=(1548,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1549>, <tf.Tensor: shape=(1549,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1550>, <tf.Tensor: shape=(1550,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1551>, <tf.Tensor: shape=(1551,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1552>, <tf.Tensor: shape=(1552,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1553>, <tf.Tensor: shape=(1553,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1554>, <tf.Tensor: shape=(1554,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1555>, <tf.Tensor: shape=(1555,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1556>, <tf.Tensor: shape=(1556,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1557>, <tf.Tensor: shape=(1557,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1558>, <tf.Tensor: shape=(1558,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1559>, <tf.Tensor: shape=(1559,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1560>, <tf.Tensor: shape=(1560,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1561>, <tf.Tensor: shape=(1561,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1562>, <tf.Tensor: shape=(1562,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1563>, <tf.Tensor: shape=(1563,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1564>, <tf.Tensor: shape=(1564,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1565>, <tf.Tensor: shape=(1565,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1566>, <tf.Tensor: shape=(1566,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1567>, <tf.Tensor: shape=(1567,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1568>, <tf.Tensor: shape=(1568,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1569>, <tf.Tensor: shape=(1569,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1570>, <tf.Tensor: shape=(1570,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1571>, <tf.Tensor: shape=(1571,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1572>, <tf.Tensor: shape=(1572,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1573>, <tf.Tensor: shape=(1573,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1574>, <tf.Tensor: shape=(1574,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1575>, <tf.Tensor: shape=(1575,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1576>, <tf.Tensor: shape=(1576,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1577>, <tf.Tensor: shape=(1577,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1578>, <tf.Tensor: shape=(1578,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1579>, <tf.Tensor: shape=(1579,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1580>, <tf.Tensor: shape=(1580,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1581>, <tf.Tensor: shape=(1581,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1582>, <tf.Tensor: shape=(1582,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1583>, <tf.Tensor: shape=(1583,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1584>, <tf.Tensor: shape=(1584,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1585>, <tf.Tensor: shape=(1585,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1586>, <tf.Tensor: shape=(1586,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1587>, <tf.Tensor: shape=(1587,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1588>, <tf.Tensor: shape=(1588,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1589>, <tf.Tensor: shape=(1589,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1590>, <tf.Tensor: shape=(1590,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1591>, <tf.Tensor: shape=(1591,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1592>, <tf.Tensor: shape=(1592,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1593>, <tf.Tensor: shape=(1593,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1594>, <tf.Tensor: shape=(1594,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1595>, <tf.Tensor: shape=(1595,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1596>, <tf.Tensor: shape=(1596,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1597>, <tf.Tensor: shape=(1597,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1598>, <tf.Tensor: shape=(1598,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1599>, <tf.Tensor: shape=(1599,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1600>, <tf.Tensor: shape=(1600,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1601>, <tf.Tensor: shape=(1601,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1602>, <tf.Tensor: shape=(1602,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1603>, <tf.Tensor: shape=(1603,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1604>, <tf.Tensor: shape=(1604,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1605>, <tf.Tensor: shape=(1605,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1606>, <tf.Tensor: shape=(1606,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1607>, <tf.Tensor: shape=(1607,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1608>, <tf.Tensor: shape=(1608,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1609>, <tf.Tensor: shape=(1609,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1610>, <tf.Tensor: shape=(1610,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1611>, <tf.Tensor: shape=(1611,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1612>, <tf.Tensor: shape=(1612,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1613>, <tf.Tensor: shape=(1613,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1614>, <tf.Tensor: shape=(1614,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1615>, <tf.Tensor: shape=(1615,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1616>, <tf.Tensor: shape=(1616,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1617>, <tf.Tensor: shape=(1617,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1618>, <tf.Tensor: shape=(1618,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1619>, <tf.Tensor: shape=(1619,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1620>, <tf.Tensor: shape=(1620,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1621>, <tf.Tensor: shape=(1621,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1622>, <tf.Tensor: shape=(1622,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1623>, <tf.Tensor: shape=(1623,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1624>, <tf.Tensor: shape=(1624,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1625>, <tf.Tensor: shape=(1625,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1626>, <tf.Tensor: shape=(1626,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1627>, <tf.Tensor: shape=(1627,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1628>, <tf.Tensor: shape=(1628,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1629>, <tf.Tensor: shape=(1629,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1630>, <tf.Tensor: shape=(1630,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1631>, <tf.Tensor: shape=(1631,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1632>, <tf.Tensor: shape=(1632,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1633>, <tf.Tensor: shape=(1633,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1634>, <tf.Tensor: shape=(1634,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1635>, <tf.Tensor: shape=(1635,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1636>, <tf.Tensor: shape=(1636,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1637>, <tf.Tensor: shape=(1637,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1638>, <tf.Tensor: shape=(1638,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1639>, <tf.Tensor: shape=(1639,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1640>, <tf.Tensor: shape=(1640,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1641>, <tf.Tensor: shape=(1641,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1642>, <tf.Tensor: shape=(1642,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1643>, <tf.Tensor: shape=(1643,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1644>, <tf.Tensor: shape=(1644,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1645>, <tf.Tensor: shape=(1645,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1646>, <tf.Tensor: shape=(1646,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1647>, <tf.Tensor: shape=(1647,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1648>, <tf.Tensor: shape=(1648,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1649>, <tf.Tensor: shape=(1649,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1650>, <tf.Tensor: shape=(1650,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1651>, <tf.Tensor: shape=(1651,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1652>, <tf.Tensor: shape=(1652,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1653>, <tf.Tensor: shape=(1653,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1654>, <tf.Tensor: shape=(1654,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1655>, <tf.Tensor: shape=(1655,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1656>, <tf.Tensor: shape=(1656,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1657>, <tf.Tensor: shape=(1657,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1658>, <tf.Tensor: shape=(1658,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1659>, <tf.Tensor: shape=(1659,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1660>, <tf.Tensor: shape=(1660,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1661>, <tf.Tensor: shape=(1661,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1662>, <tf.Tensor: shape=(1662,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1663>, <tf.Tensor: shape=(1663,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1664>, <tf.Tensor: shape=(1664,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1665>, <tf.Tensor: shape=(1665,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1666>, <tf.Tensor: shape=(1666,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1667>, <tf.Tensor: shape=(1667,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1668>, <tf.Tensor: shape=(1668,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1669>, <tf.Tensor: shape=(1669,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1670>, <tf.Tensor: shape=(1670,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1671>, <tf.Tensor: shape=(1671,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1672>, <tf.Tensor: shape=(1672,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1673>, <tf.Tensor: shape=(1673,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1674>, <tf.Tensor: shape=(1674,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1675>, <tf.Tensor: shape=(1675,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1676>, <tf.Tensor: shape=(1676,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1677>, <tf.Tensor: shape=(1677,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1678>, <tf.Tensor: shape=(1678,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1679>, <tf.Tensor: shape=(1679,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1680>, <tf.Tensor: shape=(1680,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1681>, <tf.Tensor: shape=(1681,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1682>, <tf.Tensor: shape=(1682,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1683>, <tf.Tensor: shape=(1683,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1684>, <tf.Tensor: shape=(1684,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1685>, <tf.Tensor: shape=(1685,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1686>, <tf.Tensor: shape=(1686,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1687>, <tf.Tensor: shape=(1687,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1688>, <tf.Tensor: shape=(1688,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1689>, <tf.Tensor: shape=(1689,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1690>, <tf.Tensor: shape=(1690,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1691>, <tf.Tensor: shape=(1691,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1692>, <tf.Tensor: shape=(1692,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1693>, <tf.Tensor: shape=(1693,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1694>, <tf.Tensor: shape=(1694,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1695>, <tf.Tensor: shape=(1695,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1696>, <tf.Tensor: shape=(1696,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1697>, <tf.Tensor: shape=(1697,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1698>, <tf.Tensor: shape=(1698,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1699>, <tf.Tensor: shape=(1699,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1700>, <tf.Tensor: shape=(1700,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1701>, <tf.Tensor: shape=(1701,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1702>, <tf.Tensor: shape=(1702,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1703>, <tf.Tensor: shape=(1703,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1704>, <tf.Tensor: shape=(1704,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1705>, <tf.Tensor: shape=(1705,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1706>, <tf.Tensor: shape=(1706,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1707>, <tf.Tensor: shape=(1707,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1708>, <tf.Tensor: shape=(1708,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1709>, <tf.Tensor: shape=(1709,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1710>, <tf.Tensor: shape=(1710,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1711>, <tf.Tensor: shape=(1711,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1712>, <tf.Tensor: shape=(1712,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1713>, <tf.Tensor: shape=(1713,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1714>, <tf.Tensor: shape=(1714,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1715>, <tf.Tensor: shape=(1715,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1716>, <tf.Tensor: shape=(1716,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1717>, <tf.Tensor: shape=(1717,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1718>, <tf.Tensor: shape=(1718,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1719>, <tf.Tensor: shape=(1719,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1720>, <tf.Tensor: shape=(1720,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1721>, <tf.Tensor: shape=(1721,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1722>, <tf.Tensor: shape=(1722,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1723>, <tf.Tensor: shape=(1723,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1724>, <tf.Tensor: shape=(1724,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1725>, <tf.Tensor: shape=(1725,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1726>, <tf.Tensor: shape=(1726,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1727>, <tf.Tensor: shape=(1727,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1728>, <tf.Tensor: shape=(1728,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1729>, <tf.Tensor: shape=(1729,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1730>, <tf.Tensor: shape=(1730,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1731>, <tf.Tensor: shape=(1731,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1732>, <tf.Tensor: shape=(1732,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1733>, <tf.Tensor: shape=(1733,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1734>, <tf.Tensor: shape=(1734,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1735>, <tf.Tensor: shape=(1735,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1736>, <tf.Tensor: shape=(1736,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1737>, <tf.Tensor: shape=(1737,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1738>, <tf.Tensor: shape=(1738,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1739>, <tf.Tensor: shape=(1739,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1740>, <tf.Tensor: shape=(1740,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1741>, <tf.Tensor: shape=(1741,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1742>, <tf.Tensor: shape=(1742,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1743>, <tf.Tensor: shape=(1743,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1744>, <tf.Tensor: shape=(1744,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1745>, <tf.Tensor: shape=(1745,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1746>, <tf.Tensor: shape=(1746,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1747>, <tf.Tensor: shape=(1747,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1748>, <tf.Tensor: shape=(1748,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1749>, <tf.Tensor: shape=(1749,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1750>, <tf.Tensor: shape=(1750,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1751>, <tf.Tensor: shape=(1751,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1752>, <tf.Tensor: shape=(1752,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1753>, <tf.Tensor: shape=(1753,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1754>, <tf.Tensor: shape=(1754,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1755>, <tf.Tensor: shape=(1755,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1756>, <tf.Tensor: shape=(1756,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1757>, <tf.Tensor: shape=(1757,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1758>, <tf.Tensor: shape=(1758,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1759>, <tf.Tensor: shape=(1759,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1760>, <tf.Tensor: shape=(1760,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1761>, <tf.Tensor: shape=(1761,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1762>, <tf.Tensor: shape=(1762,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1763>, <tf.Tensor: shape=(1763,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1764>, <tf.Tensor: shape=(1764,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1765>, <tf.Tensor: shape=(1765,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1766>, <tf.Tensor: shape=(1766,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1767>, <tf.Tensor: shape=(1767,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1768>, <tf.Tensor: shape=(1768,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1769>, <tf.Tensor: shape=(1769,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1770>, <tf.Tensor: shape=(1770,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1771>, <tf.Tensor: shape=(1771,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1772>, <tf.Tensor: shape=(1772,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1773>, <tf.Tensor: shape=(1773,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1774>, <tf.Tensor: shape=(1774,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1775>, <tf.Tensor: shape=(1775,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1776>, <tf.Tensor: shape=(1776,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1777>, <tf.Tensor: shape=(1777,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1778>, <tf.Tensor: shape=(1778,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1779>, <tf.Tensor: shape=(1779,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1780>, <tf.Tensor: shape=(1780,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1781>, <tf.Tensor: shape=(1781,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1782>, <tf.Tensor: shape=(1782,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1783>, <tf.Tensor: shape=(1783,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1784>, <tf.Tensor: shape=(1784,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1785>, <tf.Tensor: shape=(1785,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1786>, <tf.Tensor: shape=(1786,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1787>, <tf.Tensor: shape=(1787,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1788>, <tf.Tensor: shape=(1788,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1789>, <tf.Tensor: shape=(1789,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1790>, <tf.Tensor: shape=(1790,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1791>, <tf.Tensor: shape=(1791,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1792>, <tf.Tensor: shape=(1792,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1793>, <tf.Tensor: shape=(1793,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1794>, <tf.Tensor: shape=(1794,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1795>, <tf.Tensor: shape=(1795,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1796>, <tf.Tensor: shape=(1796,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1797>, <tf.Tensor: shape=(1797,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1798>, <tf.Tensor: shape=(1798,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1799>, <tf.Tensor: shape=(1799,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1800>, <tf.Tensor: shape=(1800,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1801>, <tf.Tensor: shape=(1801,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1802>, <tf.Tensor: shape=(1802,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1803>, <tf.Tensor: shape=(1803,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1804>, <tf.Tensor: shape=(1804,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1805>, <tf.Tensor: shape=(1805,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1806>, <tf.Tensor: shape=(1806,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1807>, <tf.Tensor: shape=(1807,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1808>, <tf.Tensor: shape=(1808,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1809>, <tf.Tensor: shape=(1809,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1810>, <tf.Tensor: shape=(1810,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1811>, <tf.Tensor: shape=(1811,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1812>, <tf.Tensor: shape=(1812,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1813>, <tf.Tensor: shape=(1813,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1814>, <tf.Tensor: shape=(1814,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1815>, <tf.Tensor: shape=(1815,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1816>, <tf.Tensor: shape=(1816,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1817>, <tf.Tensor: shape=(1817,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1818>, <tf.Tensor: shape=(1818,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1819>, <tf.Tensor: shape=(1819,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1820>, <tf.Tensor: shape=(1820,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1821>, <tf.Tensor: shape=(1821,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1822>, <tf.Tensor: shape=(1822,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1823>, <tf.Tensor: shape=(1823,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1824>, <tf.Tensor: shape=(1824,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1825>, <tf.Tensor: shape=(1825,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1826>, <tf.Tensor: shape=(1826,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1827>, <tf.Tensor: shape=(1827,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1828>, <tf.Tensor: shape=(1828,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1829>, <tf.Tensor: shape=(1829,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1830>, <tf.Tensor: shape=(1830,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1831>, <tf.Tensor: shape=(1831,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1832>, <tf.Tensor: shape=(1832,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1833>, <tf.Tensor: shape=(1833,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1834>, <tf.Tensor: shape=(1834,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1835>, <tf.Tensor: shape=(1835,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1836>, <tf.Tensor: shape=(1836,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1837>, <tf.Tensor: shape=(1837,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1838>, <tf.Tensor: shape=(1838,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1839>, <tf.Tensor: shape=(1839,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1840>, <tf.Tensor: shape=(1840,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1841>, <tf.Tensor: shape=(1841,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1842>, <tf.Tensor: shape=(1842,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1843>, <tf.Tensor: shape=(1843,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1844>, <tf.Tensor: shape=(1844,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1845>, <tf.Tensor: shape=(1845,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1846>, <tf.Tensor: shape=(1846,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1847>, <tf.Tensor: shape=(1847,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1848>, <tf.Tensor: shape=(1848,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1849>, <tf.Tensor: shape=(1849,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1850>, <tf.Tensor: shape=(1850,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1851>, <tf.Tensor: shape=(1851,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1852>, <tf.Tensor: shape=(1852,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1853>, <tf.Tensor: shape=(1853,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1854>, <tf.Tensor: shape=(1854,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1855>, <tf.Tensor: shape=(1855,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1856>, <tf.Tensor: shape=(1856,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1857>, <tf.Tensor: shape=(1857,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1858>, <tf.Tensor: shape=(1858,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1859>, <tf.Tensor: shape=(1859,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1860>, <tf.Tensor: shape=(1860,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1861>, <tf.Tensor: shape=(1861,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1862>, <tf.Tensor: shape=(1862,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1863>, <tf.Tensor: shape=(1863,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1864>, <tf.Tensor: shape=(1864,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1865>, <tf.Tensor: shape=(1865,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1866>, <tf.Tensor: shape=(1866,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1867>, <tf.Tensor: shape=(1867,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1868>, <tf.Tensor: shape=(1868,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1869>, <tf.Tensor: shape=(1869,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1870>, <tf.Tensor: shape=(1870,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1871>, <tf.Tensor: shape=(1871,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1872>, <tf.Tensor: shape=(1872,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1873>, <tf.Tensor: shape=(1873,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1874>, <tf.Tensor: shape=(1874,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1875>, <tf.Tensor: shape=(1875,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1876>, <tf.Tensor: shape=(1876,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1877>, <tf.Tensor: shape=(1877,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1878>, <tf.Tensor: shape=(1878,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1879>, <tf.Tensor: shape=(1879,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1880>, <tf.Tensor: shape=(1880,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1881>, <tf.Tensor: shape=(1881,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1882>, <tf.Tensor: shape=(1882,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1883>, <tf.Tensor: shape=(1883,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1884>, <tf.Tensor: shape=(1884,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1885>, <tf.Tensor: shape=(1885,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1886>, <tf.Tensor: shape=(1886,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1887>, <tf.Tensor: shape=(1887,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1888>, <tf.Tensor: shape=(1888,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1889>, <tf.Tensor: shape=(1889,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1890>, <tf.Tensor: shape=(1890,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1891>, <tf.Tensor: shape=(1891,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1892>, <tf.Tensor: shape=(1892,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1893>, <tf.Tensor: shape=(1893,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1894>, <tf.Tensor: shape=(1894,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1895>, <tf.Tensor: shape=(1895,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1896>, <tf.Tensor: shape=(1896,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1897>, <tf.Tensor: shape=(1897,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1898>, <tf.Tensor: shape=(1898,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1899>, <tf.Tensor: shape=(1899,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1900>, <tf.Tensor: shape=(1900,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1901>, <tf.Tensor: shape=(1901,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1902>, <tf.Tensor: shape=(1902,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1903>, <tf.Tensor: shape=(1903,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1904>, <tf.Tensor: shape=(1904,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1905>, <tf.Tensor: shape=(1905,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1906>, <tf.Tensor: shape=(1906,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1907>, <tf.Tensor: shape=(1907,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1908>, <tf.Tensor: shape=(1908,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1909>, <tf.Tensor: shape=(1909,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1910>, <tf.Tensor: shape=(1910,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1911>, <tf.Tensor: shape=(1911,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1912>, <tf.Tensor: shape=(1912,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1913>, <tf.Tensor: shape=(1913,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1914>, <tf.Tensor: shape=(1914,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1915>, <tf.Tensor: shape=(1915,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1916>, <tf.Tensor: shape=(1916,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1917>, <tf.Tensor: shape=(1917,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1918>, <tf.Tensor: shape=(1918,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1919>, <tf.Tensor: shape=(1919,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1920>, <tf.Tensor: shape=(1920,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1921>, <tf.Tensor: shape=(1921,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1922>, <tf.Tensor: shape=(1922,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1923>, <tf.Tensor: shape=(1923,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1924>, <tf.Tensor: shape=(1924,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1925>, <tf.Tensor: shape=(1925,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1926>, <tf.Tensor: shape=(1926,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1927>, <tf.Tensor: shape=(1927,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1928>, <tf.Tensor: shape=(1928,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1929>, <tf.Tensor: shape=(1929,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1930>, <tf.Tensor: shape=(1930,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1931>, <tf.Tensor: shape=(1931,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1932>, <tf.Tensor: shape=(1932,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1933>, <tf.Tensor: shape=(1933,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1934>, <tf.Tensor: shape=(1934,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1935>, <tf.Tensor: shape=(1935,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1936>, <tf.Tensor: shape=(1936,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1937>, <tf.Tensor: shape=(1937,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1938>, <tf.Tensor: shape=(1938,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1939>, <tf.Tensor: shape=(1939,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1940>, <tf.Tensor: shape=(1940,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1941>, <tf.Tensor: shape=(1941,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1942>, <tf.Tensor: shape=(1942,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1943>, <tf.Tensor: shape=(1943,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1944>, <tf.Tensor: shape=(1944,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1945>, <tf.Tensor: shape=(1945,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1946>, <tf.Tensor: shape=(1946,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1947>, <tf.Tensor: shape=(1947,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1948>, <tf.Tensor: shape=(1948,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1949>, <tf.Tensor: shape=(1949,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1950>, <tf.Tensor: shape=(1950,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1951>, <tf.Tensor: shape=(1951,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1952>, <tf.Tensor: shape=(1952,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1953>, <tf.Tensor: shape=(1953,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1954>, <tf.Tensor: shape=(1954,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1955>, <tf.Tensor: shape=(1955,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1956>, <tf.Tensor: shape=(1956,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1957>, <tf.Tensor: shape=(1957,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1958>, <tf.Tensor: shape=(1958,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1959>, <tf.Tensor: shape=(1959,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1960>, <tf.Tensor: shape=(1960,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1961>, <tf.Tensor: shape=(1961,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1962>, <tf.Tensor: shape=(1962,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1963>, <tf.Tensor: shape=(1963,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1964>, <tf.Tensor: shape=(1964,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1965>, <tf.Tensor: shape=(1965,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1966>, <tf.Tensor: shape=(1966,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1967>, <tf.Tensor: shape=(1967,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1968>, <tf.Tensor: shape=(1968,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1969>, <tf.Tensor: shape=(1969,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1970>, <tf.Tensor: shape=(1970,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1971>, <tf.Tensor: shape=(1971,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1972>, <tf.Tensor: shape=(1972,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1973>, <tf.Tensor: shape=(1973,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1974>, <tf.Tensor: shape=(1974,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1975>, <tf.Tensor: shape=(1975,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1976>, <tf.Tensor: shape=(1976,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1977>, <tf.Tensor: shape=(1977,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1978>, <tf.Tensor: shape=(1978,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1979>, <tf.Tensor: shape=(1979,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1980>, <tf.Tensor: shape=(1980,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1981>, <tf.Tensor: shape=(1981,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1982>, <tf.Tensor: shape=(1982,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1983>, <tf.Tensor: shape=(1983,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1984>, <tf.Tensor: shape=(1984,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1985>, <tf.Tensor: shape=(1985,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1986>, <tf.Tensor: shape=(1986,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1987>, <tf.Tensor: shape=(1987,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1988>, <tf.Tensor: shape=(1988,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1989>, <tf.Tensor: shape=(1989,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1990>, <tf.Tensor: shape=(1990,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1991>, <tf.Tensor: shape=(1991,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1992>, <tf.Tensor: shape=(1992,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1993>, <tf.Tensor: shape=(1993,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1994>, <tf.Tensor: shape=(1994,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1995>, <tf.Tensor: shape=(1995,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1996>, <tf.Tensor: shape=(1996,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1997>, <tf.Tensor: shape=(1997,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1998>, <tf.Tensor: shape=(1998,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=1999>, <tf.Tensor: shape=(1999,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2000>, <tf.Tensor: shape=(2000,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2001>, <tf.Tensor: shape=(2001,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2002>, <tf.Tensor: shape=(2002,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2003>, <tf.Tensor: shape=(2003,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2004>, <tf.Tensor: shape=(2004,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2005>, <tf.Tensor: shape=(2005,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2006>, <tf.Tensor: shape=(2006,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2007>, <tf.Tensor: shape=(2007,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2008>, <tf.Tensor: shape=(2008,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2009>, <tf.Tensor: shape=(2009,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2010>, <tf.Tensor: shape=(2010,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2011>, <tf.Tensor: shape=(2011,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2012>, <tf.Tensor: shape=(2012,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2013>, <tf.Tensor: shape=(2013,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2014>, <tf.Tensor: shape=(2014,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2015>, <tf.Tensor: shape=(2015,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2016>, <tf.Tensor: shape=(2016,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2017>, <tf.Tensor: shape=(2017,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2018>, <tf.Tensor: shape=(2018,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2019>, <tf.Tensor: shape=(2019,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2020>, <tf.Tensor: shape=(2020,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2021>, <tf.Tensor: shape=(2021,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2022>, <tf.Tensor: shape=(2022,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2023>, <tf.Tensor: shape=(2023,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2024>, <tf.Tensor: shape=(2024,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2025>, <tf.Tensor: shape=(2025,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2026>, <tf.Tensor: shape=(2026,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2027>, <tf.Tensor: shape=(2027,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2028>, <tf.Tensor: shape=(2028,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2029>, <tf.Tensor: shape=(2029,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2030>, <tf.Tensor: shape=(2030,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2031>, <tf.Tensor: shape=(2031,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2032>, <tf.Tensor: shape=(2032,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2033>, <tf.Tensor: shape=(2033,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2034>, <tf.Tensor: shape=(2034,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2035>, <tf.Tensor: shape=(2035,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2036>, <tf.Tensor: shape=(2036,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2037>, <tf.Tensor: shape=(2037,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2038>, <tf.Tensor: shape=(2038,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2039>, <tf.Tensor: shape=(2039,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2040>, <tf.Tensor: shape=(2040,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2041>, <tf.Tensor: shape=(2041,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2042>, <tf.Tensor: shape=(2042,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2043>, <tf.Tensor: shape=(2043,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2044>, <tf.Tensor: shape=(2044,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2045>, <tf.Tensor: shape=(2045,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2046>, <tf.Tensor: shape=(2046,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2047>, <tf.Tensor: shape=(2047,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2048>, <tf.Tensor: shape=(2048,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2049>, <tf.Tensor: shape=(2049,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2050>, <tf.Tensor: shape=(2050,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2051>, <tf.Tensor: shape=(2051,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2052>, <tf.Tensor: shape=(2052,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2053>, <tf.Tensor: shape=(2053,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2054>, <tf.Tensor: shape=(2054,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2055>, <tf.Tensor: shape=(2055,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2056>, <tf.Tensor: shape=(2056,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2057>, <tf.Tensor: shape=(2057,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2058>, <tf.Tensor: shape=(2058,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2059>, <tf.Tensor: shape=(2059,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2060>, <tf.Tensor: shape=(2060,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2061>, <tf.Tensor: shape=(2061,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2062>, <tf.Tensor: shape=(2062,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2063>, <tf.Tensor: shape=(2063,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2064>, <tf.Tensor: shape=(2064,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2065>, <tf.Tensor: shape=(2065,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2066>, <tf.Tensor: shape=(2066,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2067>, <tf.Tensor: shape=(2067,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2068>, <tf.Tensor: shape=(2068,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2069>, <tf.Tensor: shape=(2069,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2070>, <tf.Tensor: shape=(2070,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2071>, <tf.Tensor: shape=(2071,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2072>, <tf.Tensor: shape=(2072,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2073>, <tf.Tensor: shape=(2073,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2074>, <tf.Tensor: shape=(2074,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2075>, <tf.Tensor: shape=(2075,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2076>, <tf.Tensor: shape=(2076,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2077>, <tf.Tensor: shape=(2077,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2078>, <tf.Tensor: shape=(2078,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2079>, <tf.Tensor: shape=(2079,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2080>, <tf.Tensor: shape=(2080,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2081>, <tf.Tensor: shape=(2081,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2082>, <tf.Tensor: shape=(2082,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2083>, <tf.Tensor: shape=(2083,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2084>, <tf.Tensor: shape=(2084,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2085>, <tf.Tensor: shape=(2085,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2086>, <tf.Tensor: shape=(2086,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2087>, <tf.Tensor: shape=(2087,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2088>, <tf.Tensor: shape=(2088,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2089>, <tf.Tensor: shape=(2089,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2090>, <tf.Tensor: shape=(2090,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2091>, <tf.Tensor: shape=(2091,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2092>, <tf.Tensor: shape=(2092,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2093>, <tf.Tensor: shape=(2093,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2094>, <tf.Tensor: shape=(2094,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2095>, <tf.Tensor: shape=(2095,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2096>, <tf.Tensor: shape=(2096,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2097>, <tf.Tensor: shape=(2097,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2098>, <tf.Tensor: shape=(2098,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2099>, <tf.Tensor: shape=(2099,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2100>, <tf.Tensor: shape=(2100,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2101>, <tf.Tensor: shape=(2101,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2102>, <tf.Tensor: shape=(2102,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2103>, <tf.Tensor: shape=(2103,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2104>, <tf.Tensor: shape=(2104,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2105>, <tf.Tensor: shape=(2105,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2106>, <tf.Tensor: shape=(2106,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2107>, <tf.Tensor: shape=(2107,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2108>, <tf.Tensor: shape=(2108,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2109>, <tf.Tensor: shape=(2109,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2110>, <tf.Tensor: shape=(2110,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2111>, <tf.Tensor: shape=(2111,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2112>, <tf.Tensor: shape=(2112,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2113>, <tf.Tensor: shape=(2113,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2114>, <tf.Tensor: shape=(2114,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2115>, <tf.Tensor: shape=(2115,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2116>, <tf.Tensor: shape=(2116,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2117>, <tf.Tensor: shape=(2117,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2118>, <tf.Tensor: shape=(2118,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2119>, <tf.Tensor: shape=(2119,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2120>, <tf.Tensor: shape=(2120,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2121>, <tf.Tensor: shape=(2121,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2122>, <tf.Tensor: shape=(2122,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2123>, <tf.Tensor: shape=(2123,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2124>, <tf.Tensor: shape=(2124,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2125>, <tf.Tensor: shape=(2125,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2126>, <tf.Tensor: shape=(2126,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2127>, <tf.Tensor: shape=(2127,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2128>, <tf.Tensor: shape=(2128,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2129>, <tf.Tensor: shape=(2129,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2130>, <tf.Tensor: shape=(2130,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2131>, <tf.Tensor: shape=(2131,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2132>, <tf.Tensor: shape=(2132,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2133>, <tf.Tensor: shape=(2133,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2134>, <tf.Tensor: shape=(2134,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2135>, <tf.Tensor: shape=(2135,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2136>, <tf.Tensor: shape=(2136,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2137>, <tf.Tensor: shape=(2137,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2138>, <tf.Tensor: shape=(2138,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2139>, <tf.Tensor: shape=(2139,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2140>, <tf.Tensor: shape=(2140,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2141>, <tf.Tensor: shape=(2141,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2142>, <tf.Tensor: shape=(2142,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2143>, <tf.Tensor: shape=(2143,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2144>, <tf.Tensor: shape=(2144,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2145>, <tf.Tensor: shape=(2145,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2146>, <tf.Tensor: shape=(2146,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2147>, <tf.Tensor: shape=(2147,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2148>, <tf.Tensor: shape=(2148,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2149>, <tf.Tensor: shape=(2149,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2150>, <tf.Tensor: shape=(2150,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2151>, <tf.Tensor: shape=(2151,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2152>, <tf.Tensor: shape=(2152,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2153>, <tf.Tensor: shape=(2153,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2154>, <tf.Tensor: shape=(2154,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2155>, <tf.Tensor: shape=(2155,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2156>, <tf.Tensor: shape=(2156,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2157>, <tf.Tensor: shape=(2157,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2158>, <tf.Tensor: shape=(2158,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2159>, <tf.Tensor: shape=(2159,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2160>, <tf.Tensor: shape=(2160,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2161>, <tf.Tensor: shape=(2161,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2162>, <tf.Tensor: shape=(2162,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2163>, <tf.Tensor: shape=(2163,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2164>, <tf.Tensor: shape=(2164,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2165>, <tf.Tensor: shape=(2165,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2166>, <tf.Tensor: shape=(2166,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2167>, <tf.Tensor: shape=(2167,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2168>, <tf.Tensor: shape=(2168,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2169>, <tf.Tensor: shape=(2169,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2170>, <tf.Tensor: shape=(2170,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2171>, <tf.Tensor: shape=(2171,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2172>, <tf.Tensor: shape=(2172,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2173>, <tf.Tensor: shape=(2173,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2174>, <tf.Tensor: shape=(2174,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2175>, <tf.Tensor: shape=(2175,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2176>, <tf.Tensor: shape=(2176,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2177>, <tf.Tensor: shape=(2177,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2178>, <tf.Tensor: shape=(2178,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2179>, <tf.Tensor: shape=(2179,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2180>, <tf.Tensor: shape=(2180,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2181>, <tf.Tensor: shape=(2181,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2182>, <tf.Tensor: shape=(2182,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2183>, <tf.Tensor: shape=(2183,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2184>, <tf.Tensor: shape=(2184,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2185>, <tf.Tensor: shape=(2185,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2186>, <tf.Tensor: shape=(2186,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2187>, <tf.Tensor: shape=(2187,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2188>, <tf.Tensor: shape=(2188,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2189>, <tf.Tensor: shape=(2189,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2190>, <tf.Tensor: shape=(2190,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2191>, <tf.Tensor: shape=(2191,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2192>, <tf.Tensor: shape=(2192,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2193>, <tf.Tensor: shape=(2193,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2194>, <tf.Tensor: shape=(2194,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2195>, <tf.Tensor: shape=(2195,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2196>, <tf.Tensor: shape=(2196,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2197>, <tf.Tensor: shape=(2197,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2198>, <tf.Tensor: shape=(2198,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2199>, <tf.Tensor: shape=(2199,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2200>, <tf.Tensor: shape=(2200,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2201>, <tf.Tensor: shape=(2201,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2202>, <tf.Tensor: shape=(2202,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2203>, <tf.Tensor: shape=(2203,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2204>, <tf.Tensor: shape=(2204,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2205>, <tf.Tensor: shape=(2205,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2206>, <tf.Tensor: shape=(2206,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2207>, <tf.Tensor: shape=(2207,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2208>, <tf.Tensor: shape=(2208,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2209>, <tf.Tensor: shape=(2209,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2210>, <tf.Tensor: shape=(2210,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2211>, <tf.Tensor: shape=(2211,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2212>, <tf.Tensor: shape=(2212,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2213>, <tf.Tensor: shape=(2213,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2214>, <tf.Tensor: shape=(2214,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2215>, <tf.Tensor: shape=(2215,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2216>, <tf.Tensor: shape=(2216,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2217>, <tf.Tensor: shape=(2217,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2218>, <tf.Tensor: shape=(2218,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2219>, <tf.Tensor: shape=(2219,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2220>, <tf.Tensor: shape=(2220,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2221>, <tf.Tensor: shape=(2221,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2222>, <tf.Tensor: shape=(2222,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2223>, <tf.Tensor: shape=(2223,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2224>, <tf.Tensor: shape=(2224,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2225>, <tf.Tensor: shape=(2225,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2226>, <tf.Tensor: shape=(2226,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2227>, <tf.Tensor: shape=(2227,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2228>, <tf.Tensor: shape=(2228,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2229>, <tf.Tensor: shape=(2229,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2230>, <tf.Tensor: shape=(2230,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2231>, <tf.Tensor: shape=(2231,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2232>, <tf.Tensor: shape=(2232,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2233>, <tf.Tensor: shape=(2233,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2234>, <tf.Tensor: shape=(2234,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2235>, <tf.Tensor: shape=(2235,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2236>, <tf.Tensor: shape=(2236,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2237>, <tf.Tensor: shape=(2237,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2238>, <tf.Tensor: shape=(2238,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2239>, <tf.Tensor: shape=(2239,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2240>, <tf.Tensor: shape=(2240,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2241>, <tf.Tensor: shape=(2241,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2242>, <tf.Tensor: shape=(2242,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2243>, <tf.Tensor: shape=(2243,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2244>, <tf.Tensor: shape=(2244,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2245>, <tf.Tensor: shape=(2245,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2246>, <tf.Tensor: shape=(2246,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2247>, <tf.Tensor: shape=(2247,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2248>, <tf.Tensor: shape=(2248,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2249>, <tf.Tensor: shape=(2249,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2250>, <tf.Tensor: shape=(2250,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2251>, <tf.Tensor: shape=(2251,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2252>, <tf.Tensor: shape=(2252,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2253>, <tf.Tensor: shape=(2253,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2254>, <tf.Tensor: shape=(2254,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2255>, <tf.Tensor: shape=(2255,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2256>, <tf.Tensor: shape=(2256,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2257>, <tf.Tensor: shape=(2257,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2258>, <tf.Tensor: shape=(2258,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2259>, <tf.Tensor: shape=(2259,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2260>, <tf.Tensor: shape=(2260,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2261>, <tf.Tensor: shape=(2261,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2262>, <tf.Tensor: shape=(2262,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2263>, <tf.Tensor: shape=(2263,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2264>, <tf.Tensor: shape=(2264,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2265>, <tf.Tensor: shape=(2265,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2266>, <tf.Tensor: shape=(2266,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2267>, <tf.Tensor: shape=(2267,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2268>, <tf.Tensor: shape=(2268,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2269>, <tf.Tensor: shape=(2269,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2270>, <tf.Tensor: shape=(2270,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2271>, <tf.Tensor: shape=(2271,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2272>, <tf.Tensor: shape=(2272,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2273>, <tf.Tensor: shape=(2273,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2274>, <tf.Tensor: shape=(2274,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2275>, <tf.Tensor: shape=(2275,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2276>, <tf.Tensor: shape=(2276,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2277>, <tf.Tensor: shape=(2277,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2278>, <tf.Tensor: shape=(2278,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2279>, <tf.Tensor: shape=(2279,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2280>, <tf.Tensor: shape=(2280,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2281>, <tf.Tensor: shape=(2281,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2282>, <tf.Tensor: shape=(2282,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2283>, <tf.Tensor: shape=(2283,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2284>, <tf.Tensor: shape=(2284,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2285>, <tf.Tensor: shape=(2285,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2286>, <tf.Tensor: shape=(2286,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2287>, <tf.Tensor: shape=(2287,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2288>, <tf.Tensor: shape=(2288,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2289>, <tf.Tensor: shape=(2289,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2290>, <tf.Tensor: shape=(2290,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2291>, <tf.Tensor: shape=(2291,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2292>, <tf.Tensor: shape=(2292,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2293>, <tf.Tensor: shape=(2293,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2294>, <tf.Tensor: shape=(2294,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2295>, <tf.Tensor: shape=(2295,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2296>, <tf.Tensor: shape=(2296,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2297>, <tf.Tensor: shape=(2297,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2298>, <tf.Tensor: shape=(2298,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2299>, <tf.Tensor: shape=(2299,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2300>, <tf.Tensor: shape=(2300,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2301>, <tf.Tensor: shape=(2301,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2302>, <tf.Tensor: shape=(2302,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2303>, <tf.Tensor: shape=(2303,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2304>, <tf.Tensor: shape=(2304,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2305>, <tf.Tensor: shape=(2305,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2306>, <tf.Tensor: shape=(2306,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2307>, <tf.Tensor: shape=(2307,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2308>, <tf.Tensor: shape=(2308,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2309>, <tf.Tensor: shape=(2309,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2310>, <tf.Tensor: shape=(2310,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2311>, <tf.Tensor: shape=(2311,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2312>, <tf.Tensor: shape=(2312,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2313>, <tf.Tensor: shape=(2313,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2314>, <tf.Tensor: shape=(2314,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2315>, <tf.Tensor: shape=(2315,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2316>, <tf.Tensor: shape=(2316,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2317>, <tf.Tensor: shape=(2317,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2318>, <tf.Tensor: shape=(2318,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2319>, <tf.Tensor: shape=(2319,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2320>, <tf.Tensor: shape=(2320,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2321>, <tf.Tensor: shape=(2321,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2322>, <tf.Tensor: shape=(2322,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2323>, <tf.Tensor: shape=(2323,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2324>, <tf.Tensor: shape=(2324,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2325>, <tf.Tensor: shape=(2325,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2326>, <tf.Tensor: shape=(2326,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2327>, <tf.Tensor: shape=(2327,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2328>, <tf.Tensor: shape=(2328,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2329>, <tf.Tensor: shape=(2329,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2330>, <tf.Tensor: shape=(2330,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2331>, <tf.Tensor: shape=(2331,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2332>, <tf.Tensor: shape=(2332,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2333>, <tf.Tensor: shape=(2333,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2334>, <tf.Tensor: shape=(2334,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2335>, <tf.Tensor: shape=(2335,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2336>, <tf.Tensor: shape=(2336,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2337>, <tf.Tensor: shape=(2337,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2338>, <tf.Tensor: shape=(2338,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2339>, <tf.Tensor: shape=(2339,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2340>, <tf.Tensor: shape=(2340,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2341>, <tf.Tensor: shape=(2341,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2342>, <tf.Tensor: shape=(2342,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2343>, <tf.Tensor: shape=(2343,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2344>, <tf.Tensor: shape=(2344,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2345>, <tf.Tensor: shape=(2345,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2346>, <tf.Tensor: shape=(2346,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2347>, <tf.Tensor: shape=(2347,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2348>, <tf.Tensor: shape=(2348,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2349>, <tf.Tensor: shape=(2349,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2350>, <tf.Tensor: shape=(2350,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2351>, <tf.Tensor: shape=(2351,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2352>, <tf.Tensor: shape=(2352,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2353>, <tf.Tensor: shape=(2353,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2354>, <tf.Tensor: shape=(2354,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2355>, <tf.Tensor: shape=(2355,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2356>, <tf.Tensor: shape=(2356,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2357>, <tf.Tensor: shape=(2357,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2358>, <tf.Tensor: shape=(2358,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2359>, <tf.Tensor: shape=(2359,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2360>, <tf.Tensor: shape=(2360,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2361>, <tf.Tensor: shape=(2361,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2362>, <tf.Tensor: shape=(2362,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2363>, <tf.Tensor: shape=(2363,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2364>, <tf.Tensor: shape=(2364,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2365>, <tf.Tensor: shape=(2365,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2366>, <tf.Tensor: shape=(2366,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2367>, <tf.Tensor: shape=(2367,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2368>, <tf.Tensor: shape=(2368,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2369>, <tf.Tensor: shape=(2369,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2370>, <tf.Tensor: shape=(2370,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2371>, <tf.Tensor: shape=(2371,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2372>, <tf.Tensor: shape=(2372,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2373>, <tf.Tensor: shape=(2373,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2374>, <tf.Tensor: shape=(2374,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2375>, <tf.Tensor: shape=(2375,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2376>, <tf.Tensor: shape=(2376,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2377>, <tf.Tensor: shape=(2377,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2378>, <tf.Tensor: shape=(2378,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2379>, <tf.Tensor: shape=(2379,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2380>, <tf.Tensor: shape=(2380,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2381>, <tf.Tensor: shape=(2381,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2382>, <tf.Tensor: shape=(2382,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2383>, <tf.Tensor: shape=(2383,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2384>, <tf.Tensor: shape=(2384,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2385>, <tf.Tensor: shape=(2385,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2386>, <tf.Tensor: shape=(2386,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2387>, <tf.Tensor: shape=(2387,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2388>, <tf.Tensor: shape=(2388,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2389>, <tf.Tensor: shape=(2389,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2390>, <tf.Tensor: shape=(2390,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2391>, <tf.Tensor: shape=(2391,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2392>, <tf.Tensor: shape=(2392,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2393>, <tf.Tensor: shape=(2393,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2394>, <tf.Tensor: shape=(2394,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2395>, <tf.Tensor: shape=(2395,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2396>, <tf.Tensor: shape=(2396,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2397>, <tf.Tensor: shape=(2397,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2398>, <tf.Tensor: shape=(2398,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2399>, <tf.Tensor: shape=(2399,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2400>, <tf.Tensor: shape=(2400,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2401>, <tf.Tensor: shape=(2401,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2402>, <tf.Tensor: shape=(2402,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2403>, <tf.Tensor: shape=(2403,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2404>, <tf.Tensor: shape=(2404,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2405>, <tf.Tensor: shape=(2405,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2406>, <tf.Tensor: shape=(2406,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2407>, <tf.Tensor: shape=(2407,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2408>, <tf.Tensor: shape=(2408,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2409>, <tf.Tensor: shape=(2409,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2410>, <tf.Tensor: shape=(2410,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2411>, <tf.Tensor: shape=(2411,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2412>, <tf.Tensor: shape=(2412,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2413>, <tf.Tensor: shape=(2413,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2414>, <tf.Tensor: shape=(2414,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2415>, <tf.Tensor: shape=(2415,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2416>, <tf.Tensor: shape=(2416,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2417>, <tf.Tensor: shape=(2417,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2418>, <tf.Tensor: shape=(2418,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2419>, <tf.Tensor: shape=(2419,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2420>, <tf.Tensor: shape=(2420,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2421>, <tf.Tensor: shape=(2421,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2422>, <tf.Tensor: shape=(2422,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2423>, <tf.Tensor: shape=(2423,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2424>, <tf.Tensor: shape=(2424,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2425>, <tf.Tensor: shape=(2425,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2426>, <tf.Tensor: shape=(2426,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2427>, <tf.Tensor: shape=(2427,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2428>, <tf.Tensor: shape=(2428,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2429>, <tf.Tensor: shape=(2429,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2430>, <tf.Tensor: shape=(2430,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2431>, <tf.Tensor: shape=(2431,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2432>, <tf.Tensor: shape=(2432,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2433>, <tf.Tensor: shape=(2433,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2434>, <tf.Tensor: shape=(2434,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2435>, <tf.Tensor: shape=(2435,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2436>, <tf.Tensor: shape=(2436,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2437>, <tf.Tensor: shape=(2437,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2438>, <tf.Tensor: shape=(2438,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2439>, <tf.Tensor: shape=(2439,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2440>, <tf.Tensor: shape=(2440,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2441>, <tf.Tensor: shape=(2441,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2442>, <tf.Tensor: shape=(2442,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2443>, <tf.Tensor: shape=(2443,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2444>, <tf.Tensor: shape=(2444,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2445>, <tf.Tensor: shape=(2445,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2446>, <tf.Tensor: shape=(2446,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2447>, <tf.Tensor: shape=(2447,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2448>, <tf.Tensor: shape=(2448,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2449>, <tf.Tensor: shape=(2449,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2450>, <tf.Tensor: shape=(2450,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2451>, <tf.Tensor: shape=(2451,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2452>, <tf.Tensor: shape=(2452,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2453>, <tf.Tensor: shape=(2453,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2454>, <tf.Tensor: shape=(2454,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2455>, <tf.Tensor: shape=(2455,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2456>, <tf.Tensor: shape=(2456,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2457>, <tf.Tensor: shape=(2457,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2458>, <tf.Tensor: shape=(2458,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2459>, <tf.Tensor: shape=(2459,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2460>, <tf.Tensor: shape=(2460,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2461>, <tf.Tensor: shape=(2461,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2462>, <tf.Tensor: shape=(2462,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2463>, <tf.Tensor: shape=(2463,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2464>, <tf.Tensor: shape=(2464,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2465>, <tf.Tensor: shape=(2465,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2466>, <tf.Tensor: shape=(2466,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=2467>, <tf.Tensor: shape=(2467,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-a6a66634aa54>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    734\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    735\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# For Python 3 compatibility\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 736\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    738\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_next_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36mnext\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    770\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    771\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 772\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    773\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOutOfRangeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    774\u001b[0m       \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m_next_internal\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    756\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterator_resource\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m             \u001b[0moutput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flat_output_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 758\u001b[0;31m             output_shapes=self._flat_output_shapes)\n\u001b[0m\u001b[1;32m    759\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    760\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/gen_dataset_ops.py\u001b[0m in \u001b[0;36miterator_get_next\u001b[0;34m(iterator, output_types, output_shapes, name)\u001b[0m\n\u001b[1;32m   2605\u001b[0m         \u001b[0m_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_context_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"IteratorGetNext\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2606\u001b[0m         \u001b[0mtld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mop_callbacks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"output_types\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2607\u001b[0;31m         \"output_shapes\", output_shapes)\n\u001b[0m\u001b[1;32m   2608\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2609\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"8m2hOchk5Ftn","executionInfo":{"status":"ok","timestamp":1602776022140,"user_tz":-540,"elapsed":844,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"82483616-555f-449a-e872-786d93437259","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["def gen(stop):\n","  for i in itertools.count(1):\n","    if i < stop:\n","      yield ( i, [1] * i)\n","\n","dataset = tf.data.Dataset.from_generator(\n","    gen, args=[10],\n","    output_types=(tf.int64, tf.int64),\n","    output_shapes=(tf.TensorShape([]), tf.TensorShape([None]))\n",")\n","\n","list(dataset.take(7).as_numpy_iterator())"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, array([1])),\n"," (2, array([1, 1])),\n"," (3, array([1, 1, 1])),\n"," (4, array([1, 1, 1, 1])),\n"," (5, array([1, 1, 1, 1, 1])),\n"," (6, array([1, 1, 1, 1, 1, 1])),\n"," (7, array([1, 1, 1, 1, 1, 1, 1]))]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"IQUCMAdilyA1"},"source":["### batch, repeat\n","- `batch()`: 배치 사이즈 크기\n","- `repeat()`: 반복 횟수"]},{"cell_type":"code","metadata":{"id":"qJunKghtl0Mk","executionInfo":{"status":"ok","timestamp":1602776052206,"user_tz":-540,"elapsed":745,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["dataset = num_list_dataset.repeat(3).batch(7)"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"EwNlE6d2l0Qy","executionInfo":{"status":"ok","timestamp":1602776066220,"user_tz":-540,"elapsed":861,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"56982280-2477-46f2-b9a2-8b0aae60ef65","colab":{"base_uri":"https://localhost:8080/","height":170}},"source":["for item in dataset:\n","  print(item)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["tf.Tensor([0 1 2 3 4 5 6], shape=(7,), dtype=int64)\n","tf.Tensor([ 7  8  9 10 11 12 13], shape=(7,), dtype=int64)\n","tf.Tensor([14 15 16 17 18 19  0], shape=(7,), dtype=int64)\n","tf.Tensor([1 2 3 4 5 6 7], shape=(7,), dtype=int64)\n","tf.Tensor([ 8  9 10 11 12 13 14], shape=(7,), dtype=int64)\n","tf.Tensor([15 16 17 18 19  0  1], shape=(7,), dtype=int64)\n","tf.Tensor([2 3 4 5 6 7 8], shape=(7,), dtype=int64)\n","tf.Tensor([ 9 10 11 12 13 14 15], shape=(7,), dtype=int64)\n","tf.Tensor([16 17 18 19], shape=(4,), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cul1bFvImVxN","executionInfo":{"status":"ok","timestamp":1602776110571,"user_tz":-540,"elapsed":791,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["dataset = num_list_dataset.repeat(3).batch(7, drop_remainder=True)"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"IHZ8JHIBmt_f","executionInfo":{"status":"ok","timestamp":1602776112406,"user_tz":-540,"elapsed":837,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"cd95275d-d0ff-4e3e-9aea-3e4b2ffc4086","colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["for item in dataset:\n","  print(item)"],"execution_count":17,"outputs":[{"output_type":"stream","text":["tf.Tensor([0 1 2 3 4 5 6], shape=(7,), dtype=int64)\n","tf.Tensor([ 7  8  9 10 11 12 13], shape=(7,), dtype=int64)\n","tf.Tensor([14 15 16 17 18 19  0], shape=(7,), dtype=int64)\n","tf.Tensor([1 2 3 4 5 6 7], shape=(7,), dtype=int64)\n","tf.Tensor([ 8  9 10 11 12 13 14], shape=(7,), dtype=int64)\n","tf.Tensor([15 16 17 18 19  0  1], shape=(7,), dtype=int64)\n","tf.Tensor([2 3 4 5 6 7 8], shape=(7,), dtype=int64)\n","tf.Tensor([ 9 10 11 12 13 14 15], shape=(7,), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xCAFfO6hmDDS"},"source":["### map, filter\n","- 전처리 단계에서 시행하여 원하지 않는 데이터를 거를 수 있음\n","\n","- `tf.Tensor` 자료형을 다룸"]},{"cell_type":"code","metadata":{"id":"lw37RX7KvN-K","executionInfo":{"status":"ok","timestamp":1602776197985,"user_tz":-540,"elapsed":1082,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["from tensorflow.data import Dataset"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"ubOuEgxal0Hv","executionInfo":{"status":"ok","timestamp":1602776241353,"user_tz":-540,"elapsed":726,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"131c0224-ef7d-42eb-991e-bf53764d0394","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["dataset = Dataset.range(1, 6)\n","dataset = dataset.map(lambda x: x*2)\n","list(dataset.as_numpy_iterator())"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 6, 8, 10]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"jwxn37JRuzjV","executionInfo":{"status":"ok","timestamp":1602776268771,"user_tz":-540,"elapsed":839,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"249ebeab-6d1d-4898-e07d-3a64e9b28eb1","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["dataset = Dataset.range(5)\n","\n","result = dataset.map(lambda x:x + 1)\n","\n","result"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<MapDataset shapes: (), types: tf.int64>"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"FcwzArdpuzad","executionInfo":{"status":"ok","timestamp":1602776363653,"user_tz":-540,"elapsed":680,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"0c5dbb2b-0ddd-482a-d5b1-10b4f6df8e01","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["elements = [(1, 'one'), (2,'two'), (3,'three')]\n","dataset = Dataset.from_generator(lambda: elements, (tf.int32, tf.string))\n","\n","\n","result = dataset.map(lambda x_int, y_str: x_int)\n","\n","list(result.as_numpy_iterator())"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3]"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"Tleeqc_GuzUX","executionInfo":{"status":"ok","timestamp":1602776429990,"user_tz":-540,"elapsed":664,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"40f996a4-22be-4f71-f330-f6cc239a925c","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["dataset = Dataset.range(3)\n","\n","def g(x):\n","  return tf.constant(10.5), tf.constant([\"One\", \"Two\", \"Three\"])\n","\n","\n","result = dataset.map(g)\n","\n","result.element_spec"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorSpec(shape=(), dtype=tf.float32, name=None),\n"," TensorSpec(shape=(3,), dtype=tf.string, name=None))"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"0aRvH0yR0H1H","executionInfo":{"status":"ok","timestamp":1602776511571,"user_tz":-540,"elapsed":909,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"1df6d7ad-9ff6-4bf4-8558-6047da8076c6","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["def h(x):\n","  return 10.5, [\"One\", \"Two\", \"Theee\"], np.array([1.0, 2.0], dtype=np.float64)\n","\n","\n","result = dataset.map(h)\n","\n","result.element_spec\n","\n"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorSpec(shape=(), dtype=tf.float32, name=None),\n"," TensorSpec(shape=(3,), dtype=tf.string, name=None),\n"," TensorSpec(shape=(2,), dtype=tf.float64, name=None))"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"YxvOUl4u0HxH","executionInfo":{"status":"ok","timestamp":1602776608356,"user_tz":-540,"elapsed":643,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"10f78e41-1289-41f6-b894-37f04cf602fd","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["def i(x):\n","  return (10.5, [12.5, 11.1]),  \"One\", \"Two\"\n","\n","result = dataset.map(i)\n","\n","result.element_spec"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((TensorSpec(shape=(), dtype=tf.float32, name=None),\n","  TensorSpec(shape=(2,), dtype=tf.float32, name=None)),\n"," TensorSpec(shape=(), dtype=tf.string, name=None),\n"," TensorSpec(shape=(), dtype=tf.string, name=None))"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"LeKdClAA0Vjy","executionInfo":{"status":"ok","timestamp":1602776934494,"user_tz":-540,"elapsed":752,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"5abb97fb-3102-448c-83a2-b83f5a16cf0c","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["dataset = Dataset.from_tensor_slices([1,2,3,4,5])\n","dataset = dataset.filter(lambda x: x < 3)\n","list(dataset.as_numpy_iterator())"],"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2]"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"mnMR0g6Y0X8g","executionInfo":{"status":"ok","timestamp":1602776935624,"user_tz":-540,"elapsed":860,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"a825e471-9aa1-4bf1-8764-01271c30a2cc","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["def filter_fn(x):\n","  return tf.math.equal(x, 1)\n","\n","dataset = dataset.filter(filter_fn)\n","list(dataset.as_numpy_iterator())"],"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1]"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"markdown","metadata":{"id":"MZlHtx9HiBnw"},"source":["### shuffle, take"]},{"cell_type":"code","metadata":{"id":"yVjGXd0Zg3MV","executionInfo":{"status":"ok","timestamp":1602777039490,"user_tz":-540,"elapsed":55755,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"b0990a6d-f79f-4f00-c8b2-e0400db55f9d","colab":{"base_uri":"https://localhost:8080/","height":350,"referenced_widgets":["48636ab5fe0147f7943498837ffaad7f","8d097b5ae4a74ed89a53f465d510dd9d","72c5285546054deeaf86225235058927","6a952238c8c14502857f18c43655baa9","645b03e6ddf643cb99ea17fcd1b707a7","9eb03f5167d642c5b33d4ee083b38ff4","5399ef2e798147abb9df93b8f7f431ed","6e04f6a9d7494642920765515820ffd7","7e0cde64103742c9bfa23b195aa49d56","46924571f0fc40fda0cac9422da31835","d8ca1746501d44a890215888f4c9d36c","bbf7209e97a8466897099edd7c33c35b","6bdf6670d684462eb28ae590f157c2c5","2211f7abb1644a0d9db94c29b4977add","dbb949fb9bf24ded8837839d7bd7ef5b","e03f58f0f37b4c0f9e44ba5a097e601d","a0ac8a39533343caa99053ecb90b1333","773e7c389281481298d6b0ce0d1e1eef","18b34f371bee4cd982fbc3a8551e133f","d5f196ae00a34db69de63be5970adc78","c2e8bc030fa94cb18e4aecd6ccd36799","4d7b1e4012984708bd120c178820bc89","1f415128124747c084ab985b4d9f6927","7f2d691217ab49a298b705162cd35fa0","e24debdc56fd487285406e970dbdc5ad","9f9697f3ecdc4da1baee1fc94cba86f9","167451b17e734f92a2b94c543d8fe4b4","c03a834587e74be894e70f03e1d50fb4","7e274174691145879bcd8ad6fca6fe03","e7eebd6bf35c4169ba1698c4f6702a30","5554218b2646468595bc20d93d798403","561102f8bf684227b7dc5442147369ef","f778cd8a5d994f6f9252c264158c09d6","59e8b9ccbd5d459696acc0a0c32e516a","d4405e0362b64648924473b4bbba1095","36e85d03032d434098a773aa6f83dd8f","36f56a63973c420b8d1d74cb0f15b5a8","6c83ea1963da4d5ebdcc9d5ac86afc50","568f8a4d75874135928b39d114b27e1c","3e4cfab5388846f39e8123d7679155c9","eb9378bef61e47b4ab03769ba8eec1ca","54d0388b81894a9a81f8c30878c745e5","7389c28a51b940a5b5f822330e508eaf","247ef31c890b4139ab0cd91536a7b226","a732526f705041bdb629ddbb7ea9c224","fb84b489ec014a9885c025efc0111271","eaa198ecb1334828ab59c05a9496f1b3","fdda40497bbc4c1589416a865baf80fb","7abf247b88514875a1577003e8ccd3d5","c92b8a1e90d14e3094c59080f1db7633","25f3d5659a5d49988dcafc9b2a4b29f4","15f5234db4a5425086642d03cc90203b","87ddde5ef7254833aa7fe344b9a179f9","3932bb109a4a4fc498e2243665b99869","9ace18916e5d420cbaa09d25463f4734","b4114b2e64cf414cb176fa7470c6e3b0","f9683ddd8be64e64892aac0ff60301eb","38409d3437aa46f1972ed759fee680c5","270e68572d4d43a6a4eaf790dbe0ceba","71334ce5fc954ce293d46425ab595bd9","9076c0458b4f46c9b8cdc3c308028e4d","065a3059a4d846599e5f2902f26f8b68","f0a5ba20469c46c8bfac022ced5b7514","9390e602e1b6456e9e4b43b3f792bb04"]}},"source":["dataset, info = tfds.load('imdb_reviews', with_info=True, as_supervised=True)"],"execution_count":54,"outputs":[{"output_type":"stream","text":["\u001b[1mDownloading and preparing dataset imdb_reviews/plain_text/1.0.0 (download: 80.23 MiB, generated: Unknown size, total: 80.23 MiB) to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0...\u001b[0m\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"48636ab5fe0147f7943498837ffaad7f","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Completed...', max=1.0, style=Progre…"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7e0cde64103742c9bfa23b195aa49d56","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Size...', max=1.0, style=ProgressSty…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n","\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a0ac8a39533343caa99053ecb90b1333","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\rShuffling and writing examples to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0.incompleteSCZ6Y3/imdb_reviews-train.tfrecord\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e24debdc56fd487285406e970dbdc5ad","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=25000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\r"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"f778cd8a5d994f6f9252c264158c09d6","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\rShuffling and writing examples to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0.incompleteSCZ6Y3/imdb_reviews-test.tfrecord\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"eb9378bef61e47b4ab03769ba8eec1ca","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=25000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\r"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7abf247b88514875a1577003e8ccd3d5","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\rShuffling and writing examples to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0.incompleteSCZ6Y3/imdb_reviews-unsupervised.tfrecord\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"f9683ddd8be64e64892aac0ff60301eb","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=50000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[1mDataset imdb_reviews downloaded and prepared to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0. Subsequent calls will reuse this data.\u001b[0m\n","\r"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aIYeC8XMg3JR","executionInfo":{"status":"ok","timestamp":1602777080653,"user_tz":-540,"elapsed":751,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"7e1188b9-6744-4b7b-e5be-3a97a54e3874","colab":{"base_uri":"https://localhost:8080/","height":275}},"source":["train_dataset = dataset['train']\n","train_dataset = train_dataset.batch(5).shuffle(5).take(2)\n","\n","for data in train_dataset:\n","  print(data)"],"execution_count":59,"outputs":[{"output_type":"stream","text":["(<tf.Tensor: shape=(5,), dtype=string, numpy=\n","array([b\"This is a film which should be seen by anybody interested in, effected by, or suffering from an eating disorder. It is an amazingly accurate and sensitive portrayal of bulimia in a teenage girl, its causes and its symptoms. The girl is played by one of the most brilliant young actresses working in cinema today, Alison Lohman, who was later so spectacular in 'Where the Truth Lies'. I would recommend that this film be shown in all schools, as you will never see a better on this subject. Alison Lohman is absolutely outstanding, and one marvels at her ability to convey the anguish of a girl suffering from this compulsive disorder. If barometers tell us the air pressure, Alison Lohman tells us the emotional pressure with the same degree of accuracy. Her emotional range is so precise, each scene could be measured microscopically for its gradations of trauma, on a scale of rising hysteria and desperation which reaches unbearable intensity. Mare Winningham is the perfect choice to play her mother, and does so with immense sympathy and a range of emotions just as finely tuned as Lohman's. Together, they make a pair of sensitive emotional oscillators vibrating in resonance with one another. This film is really an astonishing achievement, and director Katt Shea should be proud of it. The only reason for not seeing it is if you are not interested in people. But even if you like nature films best, this is after all animal behaviour at the sharp edge. Bulimia is an extreme version of how a tormented soul can destroy her own body in a frenzy of despair. And if we don't sympathise with people suffering from the depths of despair, then we are dead inside.\",\n","       b'Okay, you have:<br /><br />Penelope Keith as Miss Herringbone-Tweed, B.B.E. (Backbone of England.) She\\'s killed off in the first scene - that\\'s right, folks; this show has no backbone!<br /><br />Peter O\\'Toole as Ol\\' Colonel Cricket from The First War and now the emblazered Lord of the Manor.<br /><br />Joanna Lumley as the ensweatered Lady of the Manor, 20 years younger than the colonel and 20 years past her own prime but still glamourous (Brit spelling, not mine) enough to have a toy-boy on the side. It\\'s alright, they have Col. Cricket\\'s full knowledge and consent (they guy even comes \\'round for Christmas!) Still, she\\'s considerate of the colonel enough to have said toy-boy her own age (what a gal!)<br /><br />David McCallum as said toy-boy, equally as pointlessly glamourous as his squeeze. Pilcher couldn\\'t come up with any cover for him within the story, so she gave him a hush-hush job at the Circus.<br /><br />and finally:<br /><br />Susan Hampshire as Miss Polonia Teacups, Venerable Headmistress of the Venerable Girls\\' Boarding-School, serving tea in her office with a dash of deep, poignant advice for life in the outside world just before graduation. Her best bit of advice: \"I\\'ve only been to Nancherrow (the local Stately Home of England) once. I thought it was very beautiful but, somehow, not part of the real world.\" Well, we can\\'t say they didn\\'t warn us.<br /><br />Ah, Susan - time was, your character would have been running the whole show. They don\\'t write \\'em like that any more. Our loss, not yours.<br /><br />So - with a cast and setting like this, you have the re-makings of \"Brideshead Revisited,\" right?<br /><br />Wrong! They took these 1-dimensional supporting roles because they paid so well. After all, acting is one of the oldest temp-jobs there is (YOU name another!)<br /><br />First warning sign: lots and lots of backlighting. They get around it by shooting outdoors - \"hey, it\\'s just the sunlight!\"<br /><br />Second warning sign: Leading Lady cries a lot. When not crying, her eyes are moist. That\\'s the law of romance novels: Leading Lady is \"dewy-eyed.\"<br /><br />Henceforth, Leading Lady shall be known as L.L.<br /><br />Third warning sign: L.L. actually has stars in her eyes when she\\'s in love. Still, I\\'ll give Emily Mortimer an award just for having to act with that spotlight in her eyes (I wonder . did they use contacts?)<br /><br />And lastly, fourth warning sign: no on-screen female character is \"Mrs.\" She\\'s either \"Miss\" or \"Lady.\"<br /><br />When all was said and done, I still couldn\\'t tell you who was pursuing whom and why. I couldn\\'t even tell you what was said and done.<br /><br />To sum up: they all live through World War II without anything happening to them at all.<br /><br />OK, at the end, L.L. finds she\\'s lost her parents to the Japanese prison camps and baby sis comes home catatonic. Meanwhile (there\\'s always a \"meanwhile,\") some young guy L.L. had a crush on (when, I don\\'t know) comes home from some wartime tough spot and is found living on the street by Lady of the Manor (must be some street if SHE\\'s going to find him there.) Both war casualties are whisked away to recover at Nancherrow (SOMEBODY has to be \"whisked away\" SOMEWHERE in these romance stories!)<br /><br />Great drama.',\n","       b'The film is based on a genuine 1950s novel.<br /><br />Journalist Colin McInnes wrote a set of three \"London novels\": \"Absolute Beginners\", \"City of Spades\" and \"Mr Love and Justice\". I have read all three. The first two are excellent. The last, perhaps an experiment that did not come off. But McInnes\\'s work is highly acclaimed; and rightly so. This musical is the novelist\\'s ultimate nightmare - to see the fruits of one\\'s mind being turned into a glitzy, badly-acted, soporific one-dimensional apology of a film that says it captures the spirit of 1950s London, and does nothing of the sort.<br /><br />Thank goodness Colin McInnes wasn\\'t alive to witness it.',\n","       b'I really love the sexy action and sci-fi films of the sixties and its because of the actress\\'s that appeared in them. They found the sexiest women to be in these films and it didn\\'t matter if they could act (Remember \"Candy\"?). The reason I was disappointed by this film was because it wasn\\'t nostalgic enough. The story here has a European sci-fi film called \"Dragonfly\" being made and the director is fired. So the producers decide to let a young aspiring filmmaker (Jeremy Davies) to complete the picture. They\\'re is one real beautiful woman in the film who plays Dragonfly but she\\'s barely in it. Film is written and directed by Roman Coppola who uses some of his fathers exploits from his early days and puts it into the script. I wish the film could have been an homage to those early films. They could have lots of cameos by actors who appeared in them. There is one actor in this film who was popular from the sixties and its John Phillip Law (Barbarella). Gerard Depardieu, Giancarlo Giannini and Dean Stockwell appear as well. I guess I\\'m going to have to continue waiting for a director to make a good homage to the films of the sixties. If any are reading this, \"Make it as sexy as you can\"! I\\'ll be waiting!',\n","       b'Sure, this one isn\\'t really a blockbuster, nor does it target such a position. \"Dieter\" is the first name of a quite popular German musician, who is either loved or hated for his kind of acting and thats exactly what this movie is about. It is based on the autobiography \"Dieter Bohlen\" wrote a few years ago but isn\\'t meant to be accurate on that. The movie is filled with some sexual offensive content (at least for American standard) which is either amusing (not for the other \"actors\" of course) or dumb - it depends on your individual kind of humor or on you being a \"Bohlen\"-Fan or not. Technically speaking there isn\\'t much to criticize. Speaking of me I find this movie to be an OK-movie.'],\n","      dtype=object)>, <tf.Tensor: shape=(5,), dtype=int64, numpy=array([1, 0, 0, 0, 0])>)\n","(<tf.Tensor: shape=(5,), dtype=string, numpy=\n","array([b'It was disgusting and painful. What a waste of a cast! I swear, the audience (1/2 full) laughed TWICE in 90 minutes. This is not a lie. Do not even rent it.<br /><br />Zeta Jones was just too mean to be believable.<br /><br />Cusack was OK. Just OK. I felt sorry for him (the actor) in case people remember this mess.<br /><br />Roberts was the same as she always is. Charming and sweet, but with no purpose. The \"romance\" with John was completely unbelievable.',\n","       b'This is a straight-to-video movie, so it should go without saying that it\\'s not going to rival the first Lion King, but that said, this was downright good.<br /><br />My kids loved this, but that\\'s a given, they love anything that\\'s a cartoon. The big shock was that *I* liked it too, it was laugh out loud funny at some parts (even the fart jokes*), had lots of rather creative tie-ins with the first movie, and even some jokes that you had to be older to understand (but without being risqu\\xc3\\xa9 like in Shrek [\"do you think he\\'s compensating for something?\"]).<br /><br />A special note on the fart jokes, I was surprised to find that none of the jokes were just toilet noises (in fact there were almost no noises/imagery at all, the references were actually rather subtle), they actually had a setup/punchline/etc, and were almost in good taste. I\\'d like my kids to think that there\\'s more to humor than going to the bathroom, and this movie is fine in those regards.<br /><br />Hmm what else? The music was so-so, not nearly as creative as in the first or second movie, but plenty of fun for the kids. No painfully corny moments, which was a blessing for me. A little action but nothing too scary (the Secret of NIMH gave my kids nightmares, not sure a G rating was appropriate for that one...)<br /><br />All in all I\\'d say this is a great movie for kids of any age, one that\\'s 100% safe to let them watch (I try not to be overly sensitive but I\\'ve had to jump up and turn off the TV during a few movies that were less kid-appropriate than expected) - but you\\'re safe to leave the room during this one. I\\'d say stick around anyway though, you might find that you enjoy it too :)',\n","       b'Finally, Timon and Pumbaa in their own film...<br /><br />\\'The Lion King 1 1/2: Hakuna Matata\\' is an irreverent new take on a classic tale. Which classic tale, you ask? Why, \\'The Lion King\\' of course!<br /><br />Yep, if there\\'s one thing that Disney is never short of, it\\'s narcissism.<br /><br />But that doesn\\'t mean that this isn\\'t a good film. It\\'s basically the events of \\'The Lion King\\' as told from Timon and Pumbaa\\'s perspective. And it\\'s because of this that you\\'ll have to know the story of \\'The Lion King\\' by heart to see where they\\'re coming from.<br /><br />Anyway, at one level I was watching this and thinking \"Oh my god this is so lame...\" and on another level I was having a ball. Much of the humour is predictable - I mean, when Pumbaa makes up two beds, a big one for himself and a small one for Timon, within the first nanosecond we all know that Timon is going to take the big one. But that doesn\\'t stop it from being hilarious, which, IMO, is \\'Hakuna Matata\\' in a nutshell. It\\'s not what happens, it\\'s how.<br /><br />And a note of warning: there are also some fart jokes. Seriously, did you expect anything else in a film where Pumbaa takes centre stage? But as fart jokes go, these are especially good, and should satisfy even the most particular connoisseur.<br /><br />The returning voice talent is great. I\\'m kinda surprised that some of the actors were willing to return, what with most of them only having two or three lines (if they\\'re lucky). Whoopi Goldberg is particularly welcome.<br /><br />The music is also great. From \\'Digga Tunnah\\' at the start to \\'That\\'s all I need\\', an adaption of \\'Warthog Rhapsody\\' (a song that was cut from \\'The Lion King\\' and is frankly much improved in this incarnation), the music leaves me with nothing to complain about whatsoever.<br /><br />In the end, Timon and Pumbaa are awesome characters, and while it may be argued that \\'Hakuna Matata\\' is simply an excuse to see them in various fun and assorted compromising situations then so be it. It\\'s rare to find characters that you just want to spend time with.<br /><br />Am I starting to sound creepy?<br /><br />Either way, \\'The Lion King 1 1/2\\' is great if you\\'ve seen \\'The Lion King\\' far too many times. Especially if you are right now thinking \"Don\\'t be silly, there\\'s no such thing as seeing \\'The Lion King\\' too many times!\"',\n","       b'Indian Directors have it tough, They have to compete with movies like \"Laggan\" where 11 henpecked,Castrated males defend their village and half of them are certifiable idiots. \"Devdas\", a hapless, fedar- festooned foreign return drinking to oblivion, with characters running in endless corridors oblivious to any one\\'s feelings or sentiments-alas they live in an ornate squalor of red tapestry and pageantry. But to make a good movie, you have to tight-rope walk to appease the frontbenchers who are the quentessential gapers who are mesmerized with Split skirts and Dishum-Dishum fights preferably involving a nitwit \"Bollywood\" leading actor who is marginally handsome. So you can connect with a director who wants to tell a tale of Leonine village head who in own words \"defending his Village\" this is considered a violent movie or too masculine for a male audience. There are very few actors who can convey the anger and pathos like Nana Patekar (Narasimhan). Nana Patekar lets you in his courtyard and watch him beret and mock the Politician when his loyal admirers burst in laughter with every word of satire thrown at him, meanwhile his daughter is bathing his Grandson.This is as authentic a scene you can get in rural India. Nana Patekar is the essential actor who belongs to the old school of acting which is a disappearing breed in Hindi Films. The violence depicted is an intricate part of storytelling with Song&Dances thrown in for the gawkers without whom movies won\\'t sell, a sad but true state of affairs. Faster this changes better for \"Bollywood\". All said and done this is one good Movie.',\n","       b\"Nathan Detroit runs illegal craps games for high rollers in NYC, but the heat is on and he can't find a secure location. He bets chronic gambler Sky Masterson that Sky can't make a prim missionary, Sarah Brown, go out to dinner with him. Sky takes up the challenge, but both men have some surprises in store \\xc2\\x85<br /><br />This is one of those expensive fifties MGM musicals in splashy colour, with big sets, loud music, larger-than-life roles and performances to match; Broadway photographed for the big screen if you like that sort of thing, which I don't. My main problem with these type of movies is simply the music. I like all kinds of music, from Albinoni to ZZ Top, but Broadway show tunes in swing time with never-ending pah-pah-tah-dah trumpet flourishes at the end of every fourth bar aren't my cup of tea. This was written by the tag team of Frank Loesser, Mankiewicz, Jo Swerling and Abe Burrows (based on a couple of Damon Runyon stories), and while the plot is quite affable the songs are weak. Blaine's two numbers for example are identical, unnecessary, don't advance the plot and grate on the ears (and are also flagrantly misogynistic if that sort of thing bothers you). There are only two memorable tunes, Luck Be A Lady (sung by Brando, not Sinatra as you might expect) and Sit Down, You're Rockin' The Boat (nicely performed by Kaye) but you have to sit through two hours to get to them. The movie's trump card is a young Brando giving a thoughtful, laid-back performance; he also sings quite well and even dances a little, and is evenly matched with the always interesting Simmons. The sequence where the two of them escape to Havana for the night is a welcome respite from all the noise, bustle and vowel-murdering of Noo Yawk. Fans of musicals may dig this, but in my view a musical has to do something more than just film the stage show.\"],\n","      dtype=object)>, <tf.Tensor: shape=(5,), dtype=int64, numpy=array([0, 1, 1, 1, 0])>)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4OqOaYk6k7wy"},"source":["### get_next()"]},{"cell_type":"code","metadata":{"id":"m57rjJsskp8t","executionInfo":{"status":"ok","timestamp":1602777116764,"user_tz":-540,"elapsed":587,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"fdb5755d-972a-477a-f02b-a0565e0eb151","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["dataset = Dataset.range(2)\n","for element in dataset:\n","  print(element)"],"execution_count":61,"outputs":[{"output_type":"stream","text":["tf.Tensor(0, shape=(), dtype=int64)\n","tf.Tensor(1, shape=(), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vitlC-JCkp4U","executionInfo":{"status":"ok","timestamp":1602777151922,"user_tz":-540,"elapsed":656,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"ef1a8b3f-9d32-433d-8d93-a86e00d71ad6","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["dataset = Dataset.range(2)\n","\n","iterator = iter(dataset)\n","\n","\n","print(dataset)\n","print(iterator.get_next())\n","print(iterator.get_next())"],"execution_count":62,"outputs":[{"output_type":"stream","text":["<RangeDataset shapes: (), types: tf.int64>\n","tf.Tensor(0, shape=(), dtype=int64)\n","tf.Tensor(1, shape=(), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6o4XRcpLg3Fm","executionInfo":{"status":"ok","timestamp":1602777219991,"user_tz":-540,"elapsed":750,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"92897772-5a68-4ed1-d27b-6a1188e33140","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["a = np.random.randint(0, 10, size=(2,3))\n","\n","print(a)\n","\n","dataset = Dataset.from_tensor_slices(a)\n","\n","iterator = iter(dataset)\n","\n","print(iterator.get_next())\n","print(iterator.get_next())"],"execution_count":66,"outputs":[{"output_type":"stream","text":["[[1 4 1]\n"," [6 3 2]]\n","tf.Tensor([1 4 1], shape=(3,), dtype=int64)\n","tf.Tensor([6 3 2], shape=(3,), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"oAK97VN4JObZ"},"source":["## tf.dataset을 이용한 Fashion-MNIST 분류"]},{"cell_type":"markdown","metadata":{"id":"8FyGWr9h5s9m"},"source":["### modules import"]},{"cell_type":"code","metadata":{"id":"wtumZQhkobI5","executionInfo":{"status":"ok","timestamp":1602777330162,"user_tz":-540,"elapsed":604,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["import matplotlib.pyplot as plt\n","plt.style.use(['seaborn-white'])\n","\n","import tensorflow as tf\n","from tensorflow.keras.layers import Dense, Input, Flatten, Dropout, Activation, BatchNormalization\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.datasets.fashion_mnist import load_data"],"execution_count":67,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VOTtgNwc3R6f"},"source":["### 데이터 로드"]},{"cell_type":"code","metadata":{"id":"8434sHHjob1L","executionInfo":{"status":"ok","timestamp":1602779286249,"user_tz":-540,"elapsed":2230,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["(x_train, y_train), (x_test, y_test) = load_data()"],"execution_count":147,"outputs":[]},{"cell_type":"code","metadata":{"id":"bfxxi0TJ3kwq","executionInfo":{"status":"ok","timestamp":1602779286776,"user_tz":-540,"elapsed":1182,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"90f4d98f-d048-4c56-95cd-5df2eaea11ec","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print(x_train.shape)\n","print(y_train.shape)\n","print(x_test.shape)\n","print(y_test.shape)"],"execution_count":148,"outputs":[{"output_type":"stream","text":["(60000, 28, 28)\n","(60000,)\n","(10000, 28, 28)\n","(10000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PPR9OD1w3mBQ"},"source":["### 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"U3W43mhxob4P","executionInfo":{"status":"ok","timestamp":1602779289554,"user_tz":-540,"elapsed":2131,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["x_train = x_train / 255.\n","x_test = x_test / 255."],"execution_count":149,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nm8NM-QX32sf"},"source":["### tf.data 이용"]},{"cell_type":"code","metadata":{"id":"VC9howR-obaW","executionInfo":{"status":"ok","timestamp":1602779290794,"user_tz":-540,"elapsed":1350,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["train_ds = Dataset.from_tensor_slices((x_train, y_train))\n","train_ds = train_ds.shuffle(1000)\n","train_ds = train_ds.batch(32)\n","\n","test_ds = Dataset.from_tensor_slices((x_test, y_test))\n","test_ds = test_ds.batch(32)"],"execution_count":150,"outputs":[]},{"cell_type":"code","metadata":{"id":"FkbVvnrU5Idc","executionInfo":{"status":"ok","timestamp":1602779293819,"user_tz":-540,"elapsed":1322,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n","               'Sandal',' Shirt','Sneaker', 'Bag',' Ankle boot']"],"execution_count":151,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aXJEB1qg4eB0"},"source":["### 데이터 확인"]},{"cell_type":"code","metadata":{"id":"COlETHf2obVD","executionInfo":{"status":"ok","timestamp":1602779296733,"user_tz":-540,"elapsed":2235,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"34e3a631-6c4e-45df-8172-82f45cbd2298","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["for image, label in train_ds.take(5):\n","\n","  plt.title(\"{}\".format(class_names[label[0]]))\n","  plt.imshow(image[0, :, :], cmap='gray')\n","  plt.show()"],"execution_count":152,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPYAAAEECAYAAAAbP8luAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATTElEQVR4nO3dW0xU1x4G8G9gGLmLIINSAjYGLYo+tGo7Em1BosG0UUwtFZW0aRsNxYKGGkIUTDCgSG3FngSlXlKx6STTNPFBC7FqYgyO0TYm0FjEphRRcbiDDHLR89A4pxZmbeY+Z/n9nsr+d8/+O/i5Z/baey3V06dPn4KIpOLj6QaIyPkYbCIJMdhEEmKwiSTEYBNJiMEmkpDa0w2QfYqLi2E0GgEAra2t0Gq1mDJlCgDAYDAgODjYk+2Rh6k4jv3/LyUlBeXl5Vi0aJGnWyEvwTO2ZIxGI7788ktERUVBrVbjiy++wLlz5/Cf//wHo6Oj0Gq12Lt3L2JjY1FQUIDY2FhkZ2cDwHM/19TU4PTp03j69CmCg4NRVlaG+Ph4NDc3Y8+ePTCZTNBoNCgtLcWCBQsmPC55DoMtod9++w25ubnQ6XS4d+8edu/ejR9++AFxcXE4fvw4ioqKcPLkSav7DwwM4NChQ7h48SKCg4Nx7tw5XLp0CbNnz8ann36Kjz/+GOvXr8eNGzeQnZ2NixcvjjsueRYvnknI39/fEq4rV67g9ddfR1xcHABg/fr1MBqNGB0dtbr/lClToFKpYDAY0NHRgbS0NHzyySf4448/0NnZiXfffRcA8NprryE8PBy//vrruOOSZ/GMLaGpU6da/ru7uxuhoaGWn0NCQvD06VN0d3db3d/Pzw8nT55EVVUVDh8+jLlz56K4uBiPHj3C0NAQ0tLSLP/vwMAAenp6EBoa+txxybMYbMlFRERYzqgA0NvbCx8fH0ybNg0+Pj548uTJc7Vn5s2bh8rKSgwPD+Obb75BcXExKioqEBQUhJ9++mnccZ5doSfvwI/ikktKSsL169fR2toKAPj++++RlJQEtVqNyMhI3Lp1C8DfQ2a//PILAOD333/HZ599huHhYWg0GiQmJkKlUuGll17CjBkzLMHu6urCjh07MDg46Jk/HFnFM7bkZsyYgb179yI7OxsjIyOIiYlBSUkJAOC9995DTk4OVq5ciXnz5mHVqlUAgDlz5iAmJgZvv/02/Pz8EBQUhKKiIqhUKhw8eBB79uzBV199BR8fH3z44YcIDAz05B+RJsBxbCIJ8aM4kYQYbCIJMdhEEmKwiSTkkqviQ0NDaGhoQGRkJHx9fV1xCKIX2tjYGEwmExITE+Hv7z+ubnewS0tLcfPmTahUKhQWFmLhwoWWWkNDAzZu3GjvSxPRJJ0+fXrCp/rsCva1a9fQ0tICvV6PO3fuoLCwEHq93lKPjIwEAPz111/Ce5JpvNLSUmFddCtodHS0cF+lT08DAwPCutLI6OzZs63W2tvbhfvm5uYK6/Q8tVqN2NhYS9bG1e150fr6eqSmpgL4+5fZ29uLgYEBy8P9z/4CjY6OMtg2UrrfemRkxGotLCxMuK9aLf51KwVfKdjTp0+3WhseHhbuy78n9rH2O7Pr4llHRwemTZtm+Tk8PBwmk8m+zojI6ZxyVZw3rxF5F7uCrdVq0dHRYfn54cOHVj/rE5H72RXspKQk1NbWAgAaGxuh1Wo5eR6RF7Hr4tmrr76K+fPn4/3334dKpUJxcbGz+5JWUFCQsD5z5kxhXfS1x5F9gb/vPxDRaDTCel9fn9XamjVrhPuSc9k9jp2fn+/MPojIiXhLKZGEGGwiCTHYRBJisIkkxGATSYjBJpIQZyl1s/nz5wvr/7yjbyIqlcpqrbOzU7hvRESEsP7POcYnUl9fL6wHBARYra1cuVK4b3p6urD+448/Cuv0PJ6xiSTEYBNJiMEmkhCDTSQhBptIQgw2kYQ43OVmSkNOY2NjdtenTJki3NfPz8+hY8+dO1dYF+np6RHWExMThXUOd9mGZ2wiCTHYRBJisIkkxGATSYjBJpIQg00kIQabSEIcx3YzpemHHRnH/ueyS/a8ttL0xEprf4mmJ1Yaxw4NDRXWyTY8YxNJiMEmkhCDTSQhBptIQgw2kYQYbCIJMdhEEuI4tpspPTOtNNbs6+trtaY0jv3gwQO7XxtQ7k30vLfSGLjZbBbWyTZ2BdtoNCI3Nxfx8fEAgDlz5mD37t1ObYyI7Gf3GXvJkiWorKx0Zi9E5CT8jk0kIbuD3dzcjK1bt2LDhg24cuWKM3siIgfZ9VF81qxZyMnJQVpaGlpbW5GVlYW6ujrhQwBE5D52nbGjoqKwevVqqFQqxMbGYvr06Whvb3d2b0RkJ7uCfebMGRw7dgwAYDKZ0NnZiaioKKc2RkT2s+ujeEpKCvLz8/Hzzz9jZGQEe/bs4cfwSVKa21tpvHd0dNTu11YaKx4cHBTWRcvkAuJx7uDgYOG+JpNJWCfb2BXs4OBgVFVVObsXInISDncRSYjBJpIQg00kIQabSEIMNpGE+Niml1GaAtjHx/q/xR0dHcJ9+/r6hHXRUJrSsQHxUJ3Sn6u1tVVYJ9vwjE0kIQabSEIMNpGEGGwiCTHYRBJisIkkxGATSYjj2G6mUqkc2t/f39+uGqD86KTSOLhS76LjK42Rd3d3C+tkG56xiSTEYBNJiMEmkhCDTSQhBptIQgw2kYQYbCIJcRzbzXp6eoR1R6ZxdnQcW2msWemZatHxlfZtbGwU1sk2PGMTSYjBJpIQg00kIQabSEIMNpGEGGwiCTHYRBLiOLabKY1jKy2FKxprDgoKEu6rVB8ZGRHWlZ7HFs0rrvTaSs+Ck20mdcZuampCamoqampqAAD379/H5s2bkZmZidzcXAwPD7u0SSKyjWKwBwcHUVJSAp1OZ9lWWVmJzMxMfPfdd4iLi4PBYHBpk0RkG8VgazQaVFdXQ6vVWrYZjUasWLECAJCcnIz6+nrXdUhENlP8jq1Wq8d9dzKbzZZ7miMiImAymVzTHRHZxeGr4ko39xOR+9kV7MDAQAwNDQEA2tvbn/uYTkSeZ1ewly5ditraWgBAXV0dli1b5tSmiMgxit+xGxoasH//frS1tUGtVqO2thYVFRUoKCiAXq9HdHQ01q5d645epaA0nisaCwbEa1T39/cL9w0JCRHWlZ4FV+pdNAY/ODgo3JecSzHYiYmJOHXq1LjtJ06ccElDROQ43lJKJCEGm0hCDDaRhBhsIgkx2EQS4mObbjYwMCCsKw05ie70i4mJEe67d+9eYV1pf19fX2FdNNyl9LgqORfP2EQSYrCJJMRgE0mIwSaSEINNJCEGm0hCDDaRhDiO7WZms1lYd+TRSaVldC9cuCCsb9y4UVh35JFSzmTrXjxjE0mIwSaSEINNJCEGm0hCDDaRhBhsIgkx2EQS4ji2mzkyhS8AjI2NWa0FBgYK921paRHWu7u7hfWZM2cK66IxeKXXJufiGZtIQgw2kYQYbCIJMdhEEmKwiSTEYBNJiMEmkhDHsd1M6bnkqVOnCuuicXDRnOOA8tzeJpNJWA8KChLWRXp7e+3el2w3qTN2U1MTUlNTUVNTAwAoKCjAO++8g82bN2Pz5s24dOmSK3skIhspnrEHBwdRUlICnU733PYdO3YgOTnZZY0Rkf0Uz9gajQbV1dXQarXu6IeInEAx2Gq1esK5tGpqapCVlYXt27ejq6vLJc0RkX3suiq+Zs0a5Ofn49tvv0VCQgK+/vprZ/dFRA6wK9g6nQ4JCQkAgJSUFDQ1NTm1KSJyjF3B3rZtG1pbWwEARqMR8fHxTm2KiByjeFW8oaEB+/fvR1tbG9RqNWpra7Fp0ybk5eUhICAAgYGBKCsrc0evUrh7966wLpqbGxCPVTs6d/f9+/eF9YCAALtfW2k+dXIuxWAnJibi1KlT47avWrXKJQ0RkeN4SymRhBhsIgkx2EQSYrCJJMRgE0mIj216GaVpel053HX16lVh/fPPPxfWnzx5YrU2MDBgV09kH56xiSTEYBNJiMEmkhCDTSQhBptIQgw2kYQYbCIJcRzby7S3twvrYWFhVmu3bt0S7hsTEyOsKz1S6uvrK6yLxrE5/bB78YxNJCEGm0hCDDaRhBhsIgkx2EQSYrCJJMRgE0mI49heRul5bNE4ttIyusHBwXb19Mzo6KiwrlZb/+vU1tbm0LHJNjxjE0mIwSaSEINNJCEGm0hCDDaRhBhsIgkx2EQSmtQ4dnl5OW7cuIHR0VFs2bIFCxYswM6dOzE2NobIyEgcOHAAGo3G1b2+EB48eCCsx8XFWa0pjWMPDg7a1dMzDx8+FNajo6Ot1v7880+Hjk22UQz21atXcfv2bej1enR3dyM9PR06nQ6ZmZlIS0vDwYMHYTAYkJmZ6Y5+iWgSFD+KL168GIcOHQIAhIaGwmw2w2g0YsWKFQCA5ORk1NfXu7ZLIrKJYrB9fX0RGBgIADAYDFi+fDnMZrPlo3dERARMJpNruyQim0z64tn58+dhMBhQVFT03Hal73VE5H6TCvbly5dRVVWF6upqhISEIDAwEENDQwD+nnxPq9W6tEkiso1isPv7+1FeXo4jR45YnixaunQpamtrAQB1dXVYtmyZa7skIpsoXhU/e/Ysuru7kZeXZ9m2b98+7Nq1C3q9HtHR0Vi7dq1Lm3yRKD3eKHo0cmRkRLiv0nCVEqXph318rJ8nurq6HDo22UYx2BkZGcjIyBi3/cSJEy5piIgcxzvPiCTEYBNJiMEmkhCDTSQhBptIQgw2kYQ4/bCXaWlpEdZFY8WPHz8W7vvsbkF7icbQAfEyun19fQ4dm2zDMzaRhBhsIgkx2EQSYrCJJMRgE0mIwSaSEINNJCGOY3sZpXFslUpltaa0zK2jlJ7HFo2T9/T0OLsdEuAZm0hCDDaRhBhsIgkx2EQSYrCJJMRgE0mIwSaSEMexvUx7e7uwbjabrdaerbHmKkrLOfX391utifom5+MZm0hCDDaRhBhsIgkx2EQSYrCJJMRgE0mIwSaS0KTGscvLy3Hjxg2Mjo5iy5YtuHDhAhobGxEWFgYA+Oijj/DWW2+5ss8XhtLc36L5ucPDw53dznNE84YD4nnNHz165Ox2SEAx2FevXsXt27eh1+vR3d2N9PR0vPHGG9ixYweSk5Pd0SMR2Ugx2IsXL8bChQsBAKGhoTCbzRgbG3N5Y0RkP8Xv2L6+vpZbFQ0GA5YvXw5fX1/U1NQgKysL27dvR1dXl8sbJaLJm/S94ufPn4fBYMDx48fR0NCAsLAwJCQk4OjRo/j6669RVFTkyj6JyAaTuip++fJlVFVVobq6GiEhIdDpdEhISAAApKSkoKmpyaVNEpFtFIPd39+P8vJyHDlyxHIVfNu2bWhtbQUAGI1GxMfHu7ZLIrKJ4kfxs2fPoru7G3l5eZZt69atQ15eHgICAhAYGIiysjKXNkn/MzAwYLXm6ouaAQEBwrrS1MnkPorBzsjIQEZGxrjt6enpLmmIiBzHO8+IJMRgE0mIwSaSEINNJCEGm0hCDDaRhDj98P+Ze/fuWa35+/u79Nh3794V1pubm+1+bdHywIDy1Mf0PJ6xiSTEYBNJiMEmkhCDTSQhBptIQgw2kYRcMtz17PFBtZqjac4mmu2zt7dXuK+jvw+l1xetqKl0bA532ebZ+2ntUV3VUxe8Y9evX8fGjRud/bJE9C+nT5/GokWLxm13SbCHhobQ0NCAyMhI+Pr6OvvliV54Y2NjMJlMSExMnPDGJJcEm4g8ixfPiCTk8qtbpaWluHnzJlQqFQoLCy2LD3ia0WhEbm6uZSLGOXPmYPfu3R7uCmhqakJ2djY++OADbNq0Cffv38fOnTsxNjaGyMhIHDhwABqNxuN9FRQUeM0yT/9egmrBggVe8Z5N1Ju7lsdyabCvXbuGlpYW6PV63LlzB4WFhdDr9a48pE2WLFmCyspKT7dhMTg4iJKSEuh0Osu2yspKZGZmIi0tDQcPHoTBYEBmZqbH+wLgFcs8TbQElU6n8/h7Zq03dy2P5dKP4vX19UhNTQUAzJ49G729vcJZNl90Go0G1dXV0Gq1lm1GoxErVqwAACQnJ6O+vt4r+vIWixcvxqFDhwD8bwkqb3jPrPXmruWxXBrsjo4OTJs2zfJzeHg4TCaTKw9pk+bmZmzduhUbNmzAlStXPN0O1Gr1uCucZrPZ8jEyIiLCI+/fRH0B8IplniZagsob3jNrvblreSy33kHiTRfgZ82ahZycHKSlpaG1tRVZWVmoq6vz2HexyfCm92/NmjVetczTP5egWrlypWW7N7xnnlgey6VnbK1Wi46ODsvPDx8+RGRkpCsPOWlRUVFYvXo1VCoVYmNjMX36dLS3t3u6rXECAwMta2a3t7d7zcdhb1rm6d9LUHnTe+ap5bFcGuykpCTU1tYCABobG6HVahEcHOzKQ07amTNncOzYMQCAyWRCZ2cnoqKiPNzVeEuXLrW8h3V1dVi2bJmHO/qbtyzzNNESVN7ynnlyeSyX36BSUVGB69evQ6VSobi4GK+88oorDzdpAwMDyM/PR19fH0ZGRpCTk4M333zToz01NDRg//79aGtrg1qtRlRUFCoqKlBQUIDHjx8jOjoaZWVl8PPz83hfmzZtwtGjR59b5ikiIsKtfQGAXq/H4cOH8fLLL1u27du3D7t27fLoe2att3Xr1qGmpsbl7xvvPCOSEO88I5IQg00kIQabSEIMNpGEGGwiCTHYRBJisIkkxGATSei/Wj9Gjfrmf5EAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"-2PTjY1D5g4L"},"source":["### 모델 생성\n","- 임의의 모델"]},{"cell_type":"code","metadata":{"id":"g29WUBIKobRN","executionInfo":{"status":"ok","timestamp":1602779059035,"user_tz":-540,"elapsed":588,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["def build_model():\n","  input = Input(shape=(28, 28), name='input')\n","  flatten = Flatten(input_shape=[28, 28], name='flatten')(input)\n","  hidden1 = Dense(256, kernel_initializer='he_normal', name='hidden1')(flatten)\n","  hidden1 = BatchNormalization()(hidden1)\n","  hidden1 = Activation('relu')(hidden1)\n","  dropout1 = Dropout(0.5)(hidden1)\n","\n","  hidden2 = Dense(100, kernel_initializer='he_normal', name='hidden2')(dropout1)\n","  hidden2 = BatchNormalization()(hidden2)\n","  hidden2 = Activation('relu')(hidden2)\n","  dropout2 = Dropout(0.5)(hidden2)\n","\n","  hidden3 = Dense(100, kernel_initializer='he_normal', name='hidden3')(dropout2)\n","  hidden3 = BatchNormalization()(hidden3)\n","  hidden3 = Activation('relu')(hidden3)\n","  dropout3 = Dropout(0.5)(hidden3)\n","\n","  hidden4 = Dense(50, kernel_initializer='he_normal', name='hidden4')(dropout3)\n","  hidden4 = BatchNormalization()(hidden4)\n","  hidden4 = Activation('relu')(hidden4)\n","  dropout4 = Dropout(0.5)(hidden4)\n","\n","  output = Dense(10, activation='softmax', name='output')(dropout4)\n","\n","  model = Model(inputs=[input], outputs=output)\n","\n","  return model\n","\n"],"execution_count":133,"outputs":[]},{"cell_type":"code","metadata":{"id":"q7YYIDZq8iRN","executionInfo":{"status":"ok","timestamp":1602779093697,"user_tz":-540,"elapsed":1180,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["model = build_model()"],"execution_count":136,"outputs":[]},{"cell_type":"code","metadata":{"id":"qNlPrHBT9w-G","executionInfo":{"status":"ok","timestamp":1602779094780,"user_tz":-540,"elapsed":617,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"d1d0c6a4-a4e5-4d50-f6d2-975fbda4f939","colab":{"base_uri":"https://localhost:8080/","height":799}},"source":["model.summary()"],"execution_count":137,"outputs":[{"output_type":"stream","text":["Model: \"functional_8\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input (InputLayer)           [(None, 28, 28)]          0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 784)               0         \n","_________________________________________________________________\n","hidden1 (Dense)              (None, 256)               200960    \n","_________________________________________________________________\n","batch_normalization_23 (Batc (None, 256)               1024      \n","_________________________________________________________________\n","activation_22 (Activation)   (None, 256)               0         \n","_________________________________________________________________\n","dropout_22 (Dropout)         (None, 256)               0         \n","_________________________________________________________________\n","hidden2 (Dense)              (None, 100)               25700     \n","_________________________________________________________________\n","batch_normalization_24 (Batc (None, 100)               400       \n","_________________________________________________________________\n","activation_23 (Activation)   (None, 100)               0         \n","_________________________________________________________________\n","dropout_23 (Dropout)         (None, 100)               0         \n","_________________________________________________________________\n","hidden3 (Dense)              (None, 100)               10100     \n","_________________________________________________________________\n","batch_normalization_25 (Batc (None, 100)               400       \n","_________________________________________________________________\n","activation_24 (Activation)   (None, 100)               0         \n","_________________________________________________________________\n","dropout_24 (Dropout)         (None, 100)               0         \n","_________________________________________________________________\n","hidden4 (Dense)              (None, 50)                5050      \n","_________________________________________________________________\n","batch_normalization_26 (Batc (None, 50)                200       \n","_________________________________________________________________\n","activation_25 (Activation)   (None, 50)                0         \n","_________________________________________________________________\n","dropout_25 (Dropout)         (None, 50)                0         \n","_________________________________________________________________\n","output (Dense)               (None, 10)                510       \n","=================================================================\n","Total params: 244,344\n","Trainable params: 243,332\n","Non-trainable params: 1,012\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8noHcg8C6xMM"},"source":["### 모델 컴파일\n","- 평가(metrics)방식의 다른 방법\n","  - `tf.keras.metrics.Mean`\n","  - `tf.keras.metrics.SparseCategoricalAccuracy`\n","\n","- 위 두 방식을 사용하여 loss값을 좀 더 smooth하게 만들기(평균을 내는 방식)"]},{"cell_type":"code","metadata":{"id":"gpjwC1pa7pvI","executionInfo":{"status":"ok","timestamp":1602779103734,"user_tz":-540,"elapsed":781,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["loss_object = tf.keras.losses.SparseCategoricalCrossentropy()\n","optimizer = tf.keras.optimizers.Adam()"],"execution_count":138,"outputs":[]},{"cell_type":"code","metadata":{"id":"DSA2H53-6967","executionInfo":{"status":"ok","timestamp":1602779104128,"user_tz":-540,"elapsed":625,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["train_loss =tf.keras.metrics.Mean(name = 'train_loss')\n","train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')\n","\n","test_loss =tf.keras.metrics.Mean(name = 'test_loss')\n","test_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy')"],"execution_count":139,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1uC7KjrU6WqL"},"source":["### 모델 학습"]},{"cell_type":"markdown","metadata":{"id":"ZTF2mvFYRoj_"},"source":["@tf.function 으로 인해 학습이 시작되면 그래프를 생성하여 속도가 빠름\n"]},{"cell_type":"code","metadata":{"id":"rRw0DDmqobEv","executionInfo":{"status":"ok","timestamp":1602779108104,"user_tz":-540,"elapsed":920,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["@tf.function\n","def train_step(images, labels):\n","  with tf.GradientTape() as tape:\n","    predictions = model(images)\n","    loss = loss_object(labels, predictions)\n","\n","  gradients = tape.gradient(loss, model.trainable_variables)\n","  optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n","\n","\n","  train_loss(loss)\n","  train_accuracy(labels, predictions)"],"execution_count":140,"outputs":[]},{"cell_type":"code","metadata":{"id":"rKoMJ7iJobB_","executionInfo":{"status":"ok","timestamp":1602779118811,"user_tz":-540,"elapsed":884,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["@tf.function\n","def test_step(images, labels):\n","  predictions = model(images)\n","  t_loss = loss_object(labels, predictions)\n","\n","  test_loss(t_loss)\n","   (labels, predictions)"],"execution_count":143,"outputs":[]},{"cell_type":"code","metadata":{"id":"sYkJhFWIoa_m","executionInfo":{"status":"ok","timestamp":1602779451042,"user_tz":-540,"elapsed":152845,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"384a4992-efbb-4af5-d540-f2e440baca39","colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["epochs = 20\n","\n","for epoch in range(epochs):\n","  for images, labels in train_ds:\n","    train_step(images, labels)\n","\n","  \n","  for test_images, test_labels in test_ds:\n","    test_step(test_images, test_labels)\n","\n","  \n","  template = \"Epochs: {:3d}\\tLoss: {:.4f}\\tAccuracy: {:.4f}\\tTest Loss: {:.4f}\\tTest Accuracy: {:.4f}\\t\"\n","  print(template.format(epoch+1,\n","                        train_loss.result(),\n","                        train_accuracy.result()*100,\n","                        test_loss.result(),\n","                        test_accuracy.result()*100))"],"execution_count":153,"outputs":[{"output_type":"stream","text":["Epochs:   1\tLoss: 0.4164\tAccuracy: 87.1715\tTest Loss: 0.9424\tTest Accuracy: 82.0911\t\n","Epochs:   2\tLoss: 0.4089\tAccuracy: 87.3273\tTest Loss: 0.9139\tTest Accuracy: 82.3906\t\n","Epochs:   3\tLoss: 0.4014\tAccuracy: 87.4925\tTest Loss: 0.8879\tTest Accuracy: 82.6569\t\n","Epochs:   4\tLoss: 0.3943\tAccuracy: 87.6521\tTest Loss: 0.8643\tTest Accuracy: 82.8845\t\n","Epochs:   5\tLoss: 0.3874\tAccuracy: 87.8160\tTest Loss: 0.8428\tTest Accuracy: 83.1097\t\n","Epochs:   6\tLoss: 0.3809\tAccuracy: 87.9680\tTest Loss: 0.8231\tTest Accuracy: 83.3293\t\n","Epochs:   7\tLoss: 0.3746\tAccuracy: 88.1213\tTest Loss: 0.8049\tTest Accuracy: 83.5278\t\n","Epochs:   8\tLoss: 0.3685\tAccuracy: 88.2749\tTest Loss: 0.7885\tTest Accuracy: 83.7083\t\n","Epochs:   9\tLoss: 0.3627\tAccuracy: 88.4220\tTest Loss: 0.7735\tTest Accuracy: 83.8834\t\n","Epochs:  10\tLoss: 0.3570\tAccuracy: 88.5667\tTest Loss: 0.7590\tTest Accuracy: 84.0539\t\n","Epochs:  11\tLoss: 0.3516\tAccuracy: 88.7066\tTest Loss: 0.7471\tTest Accuracy: 84.1798\t\n","Epochs:  12\tLoss: 0.3463\tAccuracy: 88.8438\tTest Loss: 0.7349\tTest Accuracy: 84.3298\t\n","Epochs:  13\tLoss: 0.3413\tAccuracy: 88.9774\tTest Loss: 0.7243\tTest Accuracy: 84.4602\t\n","Epochs:  14\tLoss: 0.3363\tAccuracy: 89.1109\tTest Loss: 0.7145\tTest Accuracy: 84.5847\t\n","Epochs:  15\tLoss: 0.3316\tAccuracy: 89.2401\tTest Loss: 0.7052\tTest Accuracy: 84.7066\t\n","Epochs:  16\tLoss: 0.3271\tAccuracy: 89.3644\tTest Loss: 0.6965\tTest Accuracy: 84.8273\t\n","Epochs:  17\tLoss: 0.3227\tAccuracy: 89.4873\tTest Loss: 0.6883\tTest Accuracy: 84.9368\t\n","Epochs:  18\tLoss: 0.3185\tAccuracy: 89.6040\tTest Loss: 0.6803\tTest Accuracy: 85.0399\t\n","Epochs:  19\tLoss: 0.3144\tAccuracy: 89.7195\tTest Loss: 0.6727\tTest Accuracy: 85.1388\t\n","Epochs:  20\tLoss: 0.3104\tAccuracy: 89.8319\tTest Loss: 0.6663\tTest Accuracy: 85.2302\t\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZEUXDyCMKWRo"},"source":["### 모델 학습 : 2번째 방법 (Keras)"]},{"cell_type":"code","metadata":{"id":"TRlqurJ_Mz6v","executionInfo":{"status":"ok","timestamp":1602780555934,"user_tz":-540,"elapsed":821,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["from sklearn.model_selection import train_test_split"],"execution_count":154,"outputs":[]},{"cell_type":"code","metadata":{"id":"XGLv1B6-KiWK","executionInfo":{"status":"ok","timestamp":1602781010628,"user_tz":-540,"elapsed":1548,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"768a567c-21d8-4b92-df47-fbb224426884","colab":{"base_uri":"https://localhost:8080/","height":901}},"source":["(x_train_full, y_train_full), (x_test, y_test) = load_data()\n","\n","x_train, x_val, y_train, y_val = train_test_split(x_train_full, y_train_full,\n","                                                  test_size = 0.3,\n","                                                  random_state=777)\n","\n","x_train = x_train / 255.\n","x_val = x_val / 255.\n","x_test = x_test / 255.\n","\n","\n","print(x_train.shape)\n","print(y_train.shape)\n","print(x_val.shape)\n","print(y_val.shape)\n","print(x_test.shape)\n","print(y_test.shape)\n","\n","model = build_model()\n","\n","model.compile(optimizer = 'sgd',\n","              loss= 'sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","\n","model.summary()"],"execution_count":157,"outputs":[{"output_type":"stream","text":["(42000, 28, 28)\n","(42000,)\n","(18000, 28, 28)\n","(18000,)\n","(10000, 28, 28)\n","(10000,)\n","Model: \"functional_10\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input (InputLayer)           [(None, 28, 28)]          0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 784)               0         \n","_________________________________________________________________\n","hidden1 (Dense)              (None, 256)               200960    \n","_________________________________________________________________\n","batch_normalization_27 (Batc (None, 256)               1024      \n","_________________________________________________________________\n","activation_26 (Activation)   (None, 256)               0         \n","_________________________________________________________________\n","dropout_26 (Dropout)         (None, 256)               0         \n","_________________________________________________________________\n","hidden2 (Dense)              (None, 100)               25700     \n","_________________________________________________________________\n","batch_normalization_28 (Batc (None, 100)               400       \n","_________________________________________________________________\n","activation_27 (Activation)   (None, 100)               0         \n","_________________________________________________________________\n","dropout_27 (Dropout)         (None, 100)               0         \n","_________________________________________________________________\n","hidden3 (Dense)              (None, 100)               10100     \n","_________________________________________________________________\n","batch_normalization_29 (Batc (None, 100)               400       \n","_________________________________________________________________\n","activation_28 (Activation)   (None, 100)               0         \n","_________________________________________________________________\n","dropout_28 (Dropout)         (None, 100)               0         \n","_________________________________________________________________\n","hidden4 (Dense)              (None, 50)                5050      \n","_________________________________________________________________\n","batch_normalization_30 (Batc (None, 50)                200       \n","_________________________________________________________________\n","activation_29 (Activation)   (None, 50)                0         \n","_________________________________________________________________\n","dropout_29 (Dropout)         (None, 50)                0         \n","_________________________________________________________________\n","output (Dense)               (None, 10)                510       \n","=================================================================\n","Total params: 244,344\n","Trainable params: 243,332\n","Non-trainable params: 1,012\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xBBuYErFFj0b"},"source":["5~6분 소요"]},{"cell_type":"code","metadata":{"id":"32TtgSsWLT-0","executionInfo":{"status":"ok","timestamp":1602781046008,"user_tz":-540,"elapsed":721,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["from tensorflow.keras.callbacks import EarlyStopping"],"execution_count":159,"outputs":[]},{"cell_type":"code","metadata":{"id":"TYEmlqkGKZbH","executionInfo":{"status":"ok","timestamp":1602781484191,"user_tz":-540,"elapsed":267429,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"152a7c85-7662-416f-d292-787ee3f051c1","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["early_stopping_cb = EarlyStopping(patience=3, monitor='val_loss',\n","                                  restore_best_weights=True)\n","\n","history = model.fit(x_train, y_train,\n","                    epochs = 200,\n","                    batch_size = 256,\n","                    shuffle=True,\n","                    validation_data=(x_val, y_val),\n","                    callbacks=[early_stopping_cb])"],"execution_count":160,"outputs":[{"output_type":"stream","text":["Epoch 1/200\n","165/165 [==============================] - 3s 18ms/step - loss: 2.5649 - accuracy: 0.1371 - val_loss: 2.0206 - val_accuracy: 0.4426\n","Epoch 2/200\n","165/165 [==============================] - 3s 16ms/step - loss: 2.2093 - accuracy: 0.2095 - val_loss: 1.7422 - val_accuracy: 0.5066\n","Epoch 3/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.9873 - accuracy: 0.2786 - val_loss: 1.5579 - val_accuracy: 0.5434\n","Epoch 4/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.8412 - accuracy: 0.3284 - val_loss: 1.4500 - val_accuracy: 0.5795\n","Epoch 5/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.7198 - accuracy: 0.3730 - val_loss: 1.3581 - val_accuracy: 0.6049\n","Epoch 6/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.6210 - accuracy: 0.4112 - val_loss: 1.2653 - val_accuracy: 0.6392\n","Epoch 7/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.5532 - accuracy: 0.4290 - val_loss: 1.1828 - val_accuracy: 0.6631\n","Epoch 8/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.4758 - accuracy: 0.4597 - val_loss: 1.1122 - val_accuracy: 0.6878\n","Epoch 9/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.4194 - accuracy: 0.4767 - val_loss: 1.0510 - val_accuracy: 0.7015\n","Epoch 10/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.3576 - accuracy: 0.5001 - val_loss: 1.0005 - val_accuracy: 0.7016\n","Epoch 11/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.3165 - accuracy: 0.5098 - val_loss: 0.9483 - val_accuracy: 0.7209\n","Epoch 12/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.2719 - accuracy: 0.5263 - val_loss: 0.9168 - val_accuracy: 0.7322\n","Epoch 13/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.2410 - accuracy: 0.5381 - val_loss: 0.8830 - val_accuracy: 0.7412\n","Epoch 14/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.2088 - accuracy: 0.5470 - val_loss: 0.8565 - val_accuracy: 0.7408\n","Epoch 15/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.1805 - accuracy: 0.5563 - val_loss: 0.8299 - val_accuracy: 0.7473\n","Epoch 16/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.1547 - accuracy: 0.5680 - val_loss: 0.8114 - val_accuracy: 0.7526\n","Epoch 17/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.1318 - accuracy: 0.5732 - val_loss: 0.7907 - val_accuracy: 0.7521\n","Epoch 18/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.1165 - accuracy: 0.5811 - val_loss: 0.7749 - val_accuracy: 0.7582\n","Epoch 19/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.0969 - accuracy: 0.5861 - val_loss: 0.7611 - val_accuracy: 0.7581\n","Epoch 20/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.0760 - accuracy: 0.5966 - val_loss: 0.7482 - val_accuracy: 0.7631\n","Epoch 21/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.0603 - accuracy: 0.6015 - val_loss: 0.7311 - val_accuracy: 0.7624\n","Epoch 22/200\n","165/165 [==============================] - 3s 16ms/step - loss: 1.0449 - accuracy: 0.6079 - val_loss: 0.7257 - val_accuracy: 0.7602\n","Epoch 23/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.0288 - accuracy: 0.6137 - val_loss: 0.7152 - val_accuracy: 0.7676\n","Epoch 24/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.0217 - accuracy: 0.6160 - val_loss: 0.7092 - val_accuracy: 0.7690\n","Epoch 25/200\n","165/165 [==============================] - 3s 15ms/step - loss: 1.0010 - accuracy: 0.6274 - val_loss: 0.6979 - val_accuracy: 0.7661\n","Epoch 26/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9967 - accuracy: 0.6258 - val_loss: 0.6885 - val_accuracy: 0.7699\n","Epoch 27/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9792 - accuracy: 0.6339 - val_loss: 0.6826 - val_accuracy: 0.7607\n","Epoch 28/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9748 - accuracy: 0.6347 - val_loss: 0.6760 - val_accuracy: 0.7689\n","Epoch 29/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9701 - accuracy: 0.6365 - val_loss: 0.6670 - val_accuracy: 0.7754\n","Epoch 30/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9511 - accuracy: 0.6457 - val_loss: 0.6597 - val_accuracy: 0.7756\n","Epoch 31/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9461 - accuracy: 0.6489 - val_loss: 0.6541 - val_accuracy: 0.7771\n","Epoch 32/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9390 - accuracy: 0.6498 - val_loss: 0.6503 - val_accuracy: 0.7782\n","Epoch 33/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9332 - accuracy: 0.6518 - val_loss: 0.6437 - val_accuracy: 0.7749\n","Epoch 34/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9243 - accuracy: 0.6553 - val_loss: 0.6387 - val_accuracy: 0.7753\n","Epoch 35/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.9150 - accuracy: 0.6598 - val_loss: 0.6363 - val_accuracy: 0.7766\n","Epoch 36/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9077 - accuracy: 0.6635 - val_loss: 0.6294 - val_accuracy: 0.7806\n","Epoch 37/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.9009 - accuracy: 0.6667 - val_loss: 0.6220 - val_accuracy: 0.7837\n","Epoch 38/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8929 - accuracy: 0.6678 - val_loss: 0.6187 - val_accuracy: 0.7812\n","Epoch 39/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8905 - accuracy: 0.6720 - val_loss: 0.6152 - val_accuracy: 0.7827\n","Epoch 40/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.8814 - accuracy: 0.6755 - val_loss: 0.6114 - val_accuracy: 0.7807\n","Epoch 41/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.8844 - accuracy: 0.6745 - val_loss: 0.6080 - val_accuracy: 0.7839\n","Epoch 42/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.8707 - accuracy: 0.6785 - val_loss: 0.6027 - val_accuracy: 0.7867\n","Epoch 43/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8665 - accuracy: 0.6803 - val_loss: 0.6002 - val_accuracy: 0.7826\n","Epoch 44/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8620 - accuracy: 0.6826 - val_loss: 0.5950 - val_accuracy: 0.7874\n","Epoch 45/200\n","165/165 [==============================] - 3s 18ms/step - loss: 0.8555 - accuracy: 0.6872 - val_loss: 0.5898 - val_accuracy: 0.7901\n","Epoch 46/200\n","165/165 [==============================] - 3s 19ms/step - loss: 0.8483 - accuracy: 0.6908 - val_loss: 0.5866 - val_accuracy: 0.7884\n","Epoch 47/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.8520 - accuracy: 0.6905 - val_loss: 0.5854 - val_accuracy: 0.7875\n","Epoch 48/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8429 - accuracy: 0.6903 - val_loss: 0.5804 - val_accuracy: 0.7885\n","Epoch 49/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8322 - accuracy: 0.6951 - val_loss: 0.5767 - val_accuracy: 0.7910\n","Epoch 50/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8297 - accuracy: 0.6977 - val_loss: 0.5744 - val_accuracy: 0.7901\n","Epoch 51/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8280 - accuracy: 0.7001 - val_loss: 0.5707 - val_accuracy: 0.7916\n","Epoch 52/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.8161 - accuracy: 0.7025 - val_loss: 0.5675 - val_accuracy: 0.7962\n","Epoch 53/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.8187 - accuracy: 0.7028 - val_loss: 0.5641 - val_accuracy: 0.7941\n","Epoch 54/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8150 - accuracy: 0.7003 - val_loss: 0.5611 - val_accuracy: 0.7955\n","Epoch 55/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.8086 - accuracy: 0.7048 - val_loss: 0.5596 - val_accuracy: 0.7941\n","Epoch 56/200\n","165/165 [==============================] - 3s 19ms/step - loss: 0.8080 - accuracy: 0.7061 - val_loss: 0.5572 - val_accuracy: 0.7989\n","Epoch 57/200\n","165/165 [==============================] - 4s 25ms/step - loss: 0.8068 - accuracy: 0.7071 - val_loss: 0.5532 - val_accuracy: 0.7958\n","Epoch 58/200\n","165/165 [==============================] - 4s 22ms/step - loss: 0.7970 - accuracy: 0.7103 - val_loss: 0.5502 - val_accuracy: 0.7977\n","Epoch 59/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.8013 - accuracy: 0.7092 - val_loss: 0.5528 - val_accuracy: 0.7939\n","Epoch 60/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.7915 - accuracy: 0.7146 - val_loss: 0.5492 - val_accuracy: 0.7978\n","Epoch 61/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.7937 - accuracy: 0.7134 - val_loss: 0.5470 - val_accuracy: 0.7981\n","Epoch 62/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.7792 - accuracy: 0.7188 - val_loss: 0.5438 - val_accuracy: 0.7975\n","Epoch 63/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.7814 - accuracy: 0.7182 - val_loss: 0.5403 - val_accuracy: 0.8013\n","Epoch 64/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.7826 - accuracy: 0.7180 - val_loss: 0.5395 - val_accuracy: 0.7997\n","Epoch 65/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7806 - accuracy: 0.7177 - val_loss: 0.5375 - val_accuracy: 0.8032\n","Epoch 66/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7735 - accuracy: 0.7229 - val_loss: 0.5385 - val_accuracy: 0.7997\n","Epoch 67/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7705 - accuracy: 0.7240 - val_loss: 0.5315 - val_accuracy: 0.8049\n","Epoch 68/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.7666 - accuracy: 0.7233 - val_loss: 0.5341 - val_accuracy: 0.8024\n","Epoch 69/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.7597 - accuracy: 0.7247 - val_loss: 0.5277 - val_accuracy: 0.8058\n","Epoch 70/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7599 - accuracy: 0.7263 - val_loss: 0.5274 - val_accuracy: 0.8057\n","Epoch 71/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7561 - accuracy: 0.7283 - val_loss: 0.5252 - val_accuracy: 0.8057\n","Epoch 72/200\n","165/165 [==============================] - 3s 15ms/step - loss: 0.7575 - accuracy: 0.7300 - val_loss: 0.5239 - val_accuracy: 0.8061\n","Epoch 73/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7580 - accuracy: 0.7294 - val_loss: 0.5233 - val_accuracy: 0.8056\n","Epoch 74/200\n","165/165 [==============================] - 3s 17ms/step - loss: 0.7448 - accuracy: 0.7318 - val_loss: 0.5211 - val_accuracy: 0.8047\n","Epoch 75/200\n","165/165 [==============================] - 3s 17ms/step - loss: 0.7442 - accuracy: 0.7346 - val_loss: 0.5203 - val_accuracy: 0.8073\n","Epoch 76/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7407 - accuracy: 0.7358 - val_loss: 0.5176 - val_accuracy: 0.8069\n","Epoch 77/200\n","165/165 [==============================] - 3s 17ms/step - loss: 0.7379 - accuracy: 0.7377 - val_loss: 0.5158 - val_accuracy: 0.8088\n","Epoch 78/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7414 - accuracy: 0.7344 - val_loss: 0.5167 - val_accuracy: 0.8082\n","Epoch 79/200\n","165/165 [==============================] - 3s 17ms/step - loss: 0.7265 - accuracy: 0.7416 - val_loss: 0.5130 - val_accuracy: 0.8066\n","Epoch 80/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7331 - accuracy: 0.7392 - val_loss: 0.5113 - val_accuracy: 0.8102\n","Epoch 81/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7317 - accuracy: 0.7379 - val_loss: 0.5117 - val_accuracy: 0.8079\n","Epoch 82/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7281 - accuracy: 0.7382 - val_loss: 0.5092 - val_accuracy: 0.8094\n","Epoch 83/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7288 - accuracy: 0.7392 - val_loss: 0.5065 - val_accuracy: 0.8103\n","Epoch 84/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7168 - accuracy: 0.7451 - val_loss: 0.5055 - val_accuracy: 0.8114\n","Epoch 85/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7237 - accuracy: 0.7414 - val_loss: 0.5026 - val_accuracy: 0.8138\n","Epoch 86/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7184 - accuracy: 0.7450 - val_loss: 0.5035 - val_accuracy: 0.8117\n","Epoch 87/200\n","165/165 [==============================] - 3s 17ms/step - loss: 0.7219 - accuracy: 0.7431 - val_loss: 0.5009 - val_accuracy: 0.8134\n","Epoch 88/200\n","165/165 [==============================] - 3s 17ms/step - loss: 0.7188 - accuracy: 0.7451 - val_loss: 0.5023 - val_accuracy: 0.8132\n","Epoch 89/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7169 - accuracy: 0.7467 - val_loss: 0.4969 - val_accuracy: 0.8162\n","Epoch 90/200\n","165/165 [==============================] - 3s 17ms/step - loss: 0.7085 - accuracy: 0.7508 - val_loss: 0.4971 - val_accuracy: 0.8166\n","Epoch 91/200\n","165/165 [==============================] - 3s 17ms/step - loss: 0.7114 - accuracy: 0.7514 - val_loss: 0.4955 - val_accuracy: 0.8191\n","Epoch 92/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7057 - accuracy: 0.7518 - val_loss: 0.4947 - val_accuracy: 0.8186\n","Epoch 93/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7053 - accuracy: 0.7509 - val_loss: 0.4959 - val_accuracy: 0.8164\n","Epoch 94/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7011 - accuracy: 0.7524 - val_loss: 0.4923 - val_accuracy: 0.8201\n","Epoch 95/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.6977 - accuracy: 0.7533 - val_loss: 0.4912 - val_accuracy: 0.8210\n","Epoch 96/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.6946 - accuracy: 0.7562 - val_loss: 0.4890 - val_accuracy: 0.8208\n","Epoch 97/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.7001 - accuracy: 0.7536 - val_loss: 0.4866 - val_accuracy: 0.8222\n","Epoch 98/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.6976 - accuracy: 0.7565 - val_loss: 0.4897 - val_accuracy: 0.8222\n","Epoch 99/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.6942 - accuracy: 0.7560 - val_loss: 0.4881 - val_accuracy: 0.8222\n","Epoch 100/200\n","165/165 [==============================] - 3s 16ms/step - loss: 0.6924 - accuracy: 0.7584 - val_loss: 0.4881 - val_accuracy: 0.8219\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RaeHz1VFKZVM","executionInfo":{"status":"ok","timestamp":1602781889749,"user_tz":-540,"elapsed":756,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"99f573fc-4ed2-41be-c40b-bf9cc8eb02fa","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["history.history.keys()"],"execution_count":164,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])"]},"metadata":{"tags":[]},"execution_count":164}]},{"cell_type":"markdown","metadata":{"id":"5pJ6MDW9CcwX"},"source":["### 모델 평가"]},{"cell_type":"code","metadata":{"id":"e4MxgLKOCeL9","executionInfo":{"status":"ok","timestamp":1602781898746,"user_tz":-540,"elapsed":1031,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"29b1959b-9ab6-40a0-c9b4-9a9e2a96d5b6","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["model.evaluate(x_test, y_test, batch_size=100)"],"execution_count":166,"outputs":[{"output_type":"stream","text":["100/100 [==============================] - 0s 4ms/step - loss: 0.5132 - accuracy: 0.8087\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.5132237076759338, 0.8087000250816345]"]},"metadata":{"tags":[]},"execution_count":166}]},{"cell_type":"markdown","metadata":{"id":"8McnnarjV2Tf"},"source":["### 결과 확인"]},{"cell_type":"code","metadata":{"id":"7zHvs2FICeHD","executionInfo":{"status":"ok","timestamp":1602781901410,"user_tz":-540,"elapsed":853,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"e69b5daa-0b04-4112-e933-3accb5d230ee","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# 첫번째 이미지 출력을 위해, 첫번째 이미지를 test_img로 지정\n","test_img = x_test[0, :, :]\n","print(test_img.shape)"],"execution_count":167,"outputs":[{"output_type":"stream","text":["(28, 28)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"L9TlZb73CeEj","executionInfo":{"status":"ok","timestamp":1602781903331,"user_tz":-540,"elapsed":1061,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"b20c6e2b-69f7-4849-9032-e882488fa0ef","colab":{"base_uri":"https://localhost:8080/","height":277}},"source":["# 첫번째 이미지를 시각화, 맞췄는지 확인할 것\n","plt.title(class_names[y_test[0]])\n","plt.imshow(test_img, cmap='gray')\n","plt.show()"],"execution_count":168,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"tLU39hstWLfh","executionInfo":{"status":"ok","timestamp":1602781934408,"user_tz":-540,"elapsed":643,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["# 모델에서 predict한 결과를 reshape\n","pred = model.predict(test_img.reshape(-1, 28, 28))"],"execution_count":173,"outputs":[]},{"cell_type":"code","metadata":{"id":"VvN3dvdZWXRd","executionInfo":{"status":"ok","timestamp":1602781906475,"user_tz":-540,"elapsed":675,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"e2e0907a-1f5e-46ef-fee0-2c6562239218","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# shape 검사\n","pred.shape"],"execution_count":170,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 10)"]},"metadata":{"tags":[]},"execution_count":170}]},{"cell_type":"code","metadata":{"id":"gXCeb-f2WYm1","executionInfo":{"status":"ok","timestamp":1602781907525,"user_tz":-540,"elapsed":607,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"64e65822-e186-4530-efaf-b28410df011d","colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["#어떤 값인지?\n","pred"],"execution_count":171,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[9.4875744e-05, 5.0242252e-05, 3.1390078e-05, 1.2557181e-04,\n","        5.8764417e-05, 7.6894112e-02, 3.6942696e-05, 2.7893049e-01,\n","        1.9000727e-03, 6.4187759e-01]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":171}]},{"cell_type":"code","metadata":{"id":"E_7gFZNAWZip","executionInfo":{"status":"ok","timestamp":1602781908827,"user_tz":-540,"elapsed":732,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"8b06047a-8087-41fc-a76c-ca394706953f","colab":{"base_uri":"https://localhost:8080/","height":37}},"source":["# 어떤 label 인지\n","class_names[np.argmax(pred)]"],"execution_count":172,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["' Ankle boot'"]},"metadata":{"tags":[]},"execution_count":172}]},{"cell_type":"markdown","metadata":{"id":"MJL5wVZiWqtw"},"source":["### Test Batch Dataset"]},{"cell_type":"code","metadata":{"id":"joaO3OqrWxIp","executionInfo":{"status":"ok","timestamp":1602781966544,"user_tz":-540,"elapsed":813,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"e6de8c7f-5c30-4880-d5e2-167fc3e01c44","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# 32개를 선택하여 slice 후, shape 확인\n","test_batch = x_test[:32, :, :]\n","test_batch_y = y_test[:32]\n","print(test_batch.shape)"],"execution_count":174,"outputs":[{"output_type":"stream","text":["(32, 28, 28)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OxqBhlqXWmXl","executionInfo":{"status":"ok","timestamp":1602781970080,"user_tz":-540,"elapsed":750,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"162a8efb-c34b-4fed-a02f-cf32f298f66e","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["#32개에 대해서 모델의 predict를 해줌.\n","preds = model.predict(test_batch)\n","preds.shape"],"execution_count":175,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(32, 10)"]},"metadata":{"tags":[]},"execution_count":175}]},{"cell_type":"code","metadata":{"id":"5Pgwy4yXW2dt","executionInfo":{"status":"ok","timestamp":1602781987280,"user_tz":-540,"elapsed":798,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}}},"source":["# Predict 하여 제일 큰 값으로만 저장.\n","preds_arg = np.argmax(preds, -1)"],"execution_count":176,"outputs":[]},{"cell_type":"code","metadata":{"id":"53xdFvATW85m","executionInfo":{"status":"ok","timestamp":1602782004695,"user_tz":-540,"elapsed":4705,"user":{"displayName":"Jenghun Kim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh8ozrjTEd4aTd3Fh173JQLBXjO_CSmgf9PQPLonQ=s64","userId":"01114927838914716549"}},"outputId":"7dd77acb-34ea-4ea3-baf6-48bab8d19244","colab":{"base_uri":"https://localhost:8080/","height":603}},"source":["num_rows = 8\n","num_cols = 4\n","num_images = num_rows * num_cols\n","\n","plt.figure(figsize=(16, 10))\n","\n","for idx in range(1, 33, 1):\n","  plt.subplot(num_rows, num_cols, idx)\n","  plt.title(\"Class: {},  True: {}\".format(class_names[preds_arg[idx-1]],\n","                                          class_names[test_batch_y[idx-1]]))\n","  plt.imshow(test_batch[idx-1], cmap='gray')\n","  \n","\n","plt.show()"],"execution_count":177,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x720 with 32 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"Up3STOJGQHL8"},"source":[""],"execution_count":null,"outputs":[]}]}